const { ethers } = require("hardhat");

async function demonstrateMultiTokenApproach() {
    console.log("üöÄ D√âMONSTRATION: APPROCHE MULTI-TOKENS RENT2REPAY");
    console.log("==================================================\n");

    const [admin, emergency, operator, alice, bob] = await ethers.getSigners();

    // D√©ployer les tokens de test
    const MockERC20 = await ethers.getContractFactory("MockERC20");
    const wxdai = await MockERC20.deploy("Wrapped XDAI", "WXDAI");
    const usdc = await MockERC20.deploy("USD Coin", "USDC");
    await wxdai.waitForDeployment();
    await usdc.waitForDeployment();

    // D√©ployer le MockRMM
    const MockRMM = await ethers.getContractFactory("MockRMM");
    const mockRMM = await MockRMM.deploy();
    await mockRMM.waitForDeployment();

    // D√©ployer Rent2Repay avec multi-tokens
    const Rent2Repay = await ethers.getContractFactory("Rent2Repay");
    const rent2repay = await Rent2Repay.deploy(
        admin.address,
        emergency.address,
        operator.address,
        await mockRMM.getAddress(),
        await wxdai.getAddress(),
        await usdc.getAddress()
    );
    await rent2repay.waitForDeployment();

    console.log("üìã CONTRATS D√âPLOY√âS:");
    console.log(`   ‚Ä¢ Rent2Repay: ${await rent2repay.getAddress()}`);
    console.log(`   ‚Ä¢ WXDAI Token: ${await wxdai.getAddress()}`);
    console.log(`   ‚Ä¢ USDC Token: ${await usdc.getAddress()}\n`);

    // Configuration des tokens par les utilisateurs
    console.log("üë• CONFIGURATION DES UTILISATEURS:");

    // Alice configure 100 WXDAI et 200 USDC par semaine
    await rent2repay.connect(alice).configureRent2Repay([await wxdai.getAddress()], [ethers.parseEther("100")]);
    await rent2repay.connect(alice).configureRent2Repay([await usdc.getAddress()], [ethers.parseUnits("200", 6)]);
    console.log("‚úÖ Alice: 100 WXDAI + 200 USDC par semaine");

    // Bob utilise la configuration batch: 50 WXDAI et 75 USDC
    const tokens = [await wxdai.getAddress(), await usdc.getAddress()];
    const amounts = [ethers.parseEther("50"), ethers.parseUnits("75", 6)];
    await rent2repay.connect(bob).configureRent2Repay(tokens, amounts);
    console.log("‚úÖ Bob: 50 WXDAI + 75 USDC par semaine (config batch)\n");

    // Simulation de remboursements
    console.log("üí∞ SIMULATION DES REMBOURSEMENTS:");

    // Mint tokens pour les tests
    await wxdai.mint(operator.address, ethers.parseEther("1000"));
    await usdc.mint(operator.address, ethers.parseUnits("1000", 6));

    // Simuler des dettes
    await mockRMM.setDebt(alice.address, await wxdai.getAddress(), ethers.parseEther("500"));
    await mockRMM.setDebt(alice.address, await usdc.getAddress(), ethers.parseUnits("300", 6));

    // Remboursement WXDAI pour Alice
    await wxdai.connect(operator).approve(await rent2repay.getAddress(), ethers.parseEther("60"));
    await rent2repay.connect(operator).rent2repay(alice.address, await wxdai.getAddress(), ethers.parseEther("60"));
    console.log("‚úÖ Alice: 60 WXDAI rembours√©s (reste 40 WXDAI disponible cette semaine)");

    // Remboursement USDC pour Alice
    await usdc.connect(operator).approve(await rent2repay.getAddress(), ethers.parseUnits("150", 6));
    await rent2repay.connect(operator).rent2repay(alice.address, await usdc.getAddress(), ethers.parseUnits("150", 6));
    console.log("‚úÖ Alice: 150 USDC rembours√©s (reste 50 USDC disponible cette semaine)\n");

    // V√©rification des limites s√©par√©es
    console.log("üìä V√âRIFICATION DES LIMITES S√âPAR√âES:");
    const aliceWxdaiAvailable = await rent2repay.getAvailableAmountThisWeek(alice.address, await wxdai.getAddress());
    const aliceUsdcAvailable = await rent2repay.getAvailableAmountThisWeek(alice.address, await usdc.getAddress());

    console.log(`   ‚Ä¢ Alice WXDAI restant: ${ethers.formatEther(aliceWxdaiAvailable)} WXDAI`);
    console.log(`   ‚Ä¢ Alice USDC restant: ${ethers.formatUnits(aliceUsdcAvailable, 6)} USDC`);

    const bobWxdaiAvailable = await rent2repay.getAvailableAmountThisWeek(bob.address, await wxdai.getAddress());
    const bobUsdcAvailable = await rent2repay.getAvailableAmountThisWeek(bob.address, await usdc.getAddress());

    console.log(`   ‚Ä¢ Bob WXDAI disponible: ${ethers.formatEther(bobWxdaiAvailable)} WXDAI`);
    console.log(`   ‚Ä¢ Bob USDC disponible: ${ethers.formatUnits(bobUsdcAvailable, 6)} USDC\n`);

    // D√©monstration de la r√©vocation granulaire
    console.log("üö´ R√âVOCATION GRANULAIRE:");

    // Alice r√©voque seulement USDC
    await rent2repay.connect(alice).revokeRent2RepayForToken(await usdc.getAddress());
    console.log("‚úÖ Alice r√©voque USDC (garde WXDAI)");

    console.log(`   ‚Ä¢ Alice autoris√©e WXDAI: ${await rent2repay.isAuthorizedForToken(alice.address, await wxdai.getAddress())}`);
    console.log(`   ‚Ä¢ Alice autoris√©e USDC: ${await rent2repay.isAuthorizedForToken(alice.address, await usdc.getAddress())}`);
    console.log(`   ‚Ä¢ Alice autoris√©e globalement: ${await rent2repay.isAuthorized(alice.address)}\n`);

    // Gestion des tokens par l'admin
    console.log("üîë GESTION DES TOKENS PAR ADMIN:");

    // Cr√©er un nouveau token
    const daiToken = await MockERC20.deploy("DAI Stablecoin", "DAI");
    await daiToken.waitForDeployment();

    // L'admin autorise le nouveau token
    await rent2repay.connect(admin).authorizeToken(await daiToken.getAddress());
    console.log("‚úÖ Admin autorise DAI");

    // V√©rifier la liste des tokens autoris√©s
    const authorizedTokens = await rent2repay.getAuthorizedTokens();
    console.log(`   ‚Ä¢ Tokens autoris√©s: ${authorizedTokens.length} (WXDAI, USDC, DAI)\n`);

    console.log("üéØ AVANTAGES DE L'APPROCHE MULTI-TOKENS:");
    console.log("==========================================");
    console.log("‚úÖ Limites ind√©pendantes par token (pas de conversion USD)");
    console.log("‚úÖ Gestion native des d√©cimales (WXDAI: 18, USDC: 6)");
    console.log("‚úÖ Configuration flexible (individuelle ou batch)");
    console.log("‚úÖ R√©vocation granulaire par token");
    console.log("‚úÖ Extensibilit√© (ajout facile de nouveaux tokens)");
    console.log("‚úÖ Pas de d√©pendance aux oracles de prix");
    console.log("‚úÖ Gas optimis√© (pas de calculs de conversion)");
    console.log("‚úÖ Simplicit√© d'impl√©mentation et de maintenance\n");

    console.log("üöÄ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!");
}

// Ex√©cution de la d√©monstration
if (require.main === module) {
    demonstrateMultiTokenApproach()
        .then(() => {
            console.log("\n‚ú® D√©monstration multi-tokens r√©ussie!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("\n‚ùå Erreur lors de la d√©monstration:", error);
            process.exit(1);
        });
}

module.exports = { demonstrateMultiTokenApproach }; 