const { ethers } = require("hardhat");
const fs = require("fs");

async function main() {
    console.log("üîç V√©rification du d√©ploiement Tenderly");
    console.log("=".repeat(50));

    // Charger les informations de d√©ploiement
    let deploymentInfo;
    try {
        deploymentInfo = JSON.parse(fs.readFileSync("scripts/tmp/deployed-gnosis.json", "utf8"));
    } catch (error) {
        console.log("‚ùå Fichier deployed-gnosis.json non trouv√©");
        console.log("Ex√©cutez d'abord: npm run deploy:tenderly");
        process.exit(1);
    }

    const [signer] = await ethers.getSigners();
    console.log(`üë§ Signeur: ${signer.address}`);

    // V√©rifier le r√©seau
    const network = await signer.provider.getNetwork();
    console.log(`üåê R√©seau: ${network.name} (${network.chainId})`);

    // R√©cup√©rer le contrat
    const rent2Repay = await ethers.getContractAt("Rent2Repay", deploymentInfo.rent2RepayAddress);
    console.log(`üì¶ Contrat: ${deploymentInfo.rent2RepayAddress}`);

    // V√©rifications de base
    console.log("\nüîç V√©rifications de base...");

    // 1. V√©rifier les r√¥les
    const adminRole = await rent2Repay.ADMIN_ROLE();
    const emergencyRole = await rent2Repay.EMERGENCY_ROLE();
    const operatorRole = await rent2Repay.OPERATOR_ROLE();

    const isAdmin = await rent2Repay.hasRole(adminRole, deploymentInfo.adminAddress);
    const isEmergency = await rent2Repay.hasRole(emergencyRole, deploymentInfo.emergencyAddress);
    const isOperator = await rent2Repay.hasRole(operatorRole, deploymentInfo.operatorAddress);

    console.log(`‚úÖ Admin role: ${isAdmin}`);
    console.log(`‚úÖ Emergency role: ${isEmergency}`);
    console.log(`‚úÖ Operator role: ${isOperator}`);

    // 2. V√©rifier la configuration RMM
    const rmm = await rent2Repay.rmm();
    console.log(`‚úÖ RMM: ${rmm}`);

    // 3. V√©rifier les tokens configur√©s
    const wxdaiConfig = await rent2Repay.tokenConfig(deploymentInfo.wxdaiToken);
    const usdcConfig = await rent2Repay.tokenConfig(deploymentInfo.usdcToken);

    console.log(`‚úÖ WXDAI configur√©: ${wxdaiConfig.active}`);
    console.log(`‚úÖ USDC configur√©: ${usdcConfig.active}`);

    // 4. V√©rifier les fees
    const [daoFees, senderTips] = await rent2Repay.getFeeConfiguration();
    console.log(`‚úÖ DAO fees: ${daoFees} BPS`);
    console.log(`‚úÖ Sender tips: ${senderTips} BPS`);

    // 5. V√©rifier le tr√©sor DAO
    const treasury = await rent2Repay.daoTreasuryAddress();
    console.log(`‚úÖ Treasury: ${treasury}`);

    // 6. V√©rifier les tokens actifs
    const activeTokens = await rent2Repay.getActiveTokens();
    console.log(`‚úÖ Tokens actifs: ${activeTokens.length}`);

    // Tests de fonctionnalit√©
    console.log("\nüß™ Tests de fonctionnalit√©...");

    // Test 1: V√©rifier que le contrat n'est pas en pause
    const isPaused = await rent2Repay.paused();
    console.log(`‚úÖ Contrat non en pause: ${!isPaused}`);

    // Test 2: V√©rifier les r√¥les du signeur actuel
    const signerIsAdmin = await rent2Repay.hasRole(adminRole, signer.address);
    const signerIsEmergency = await rent2Repay.hasRole(emergencyRole, signer.address);
    const signerIsOperator = await rent2Repay.hasRole(operatorRole, signer.address);

    console.log(`üë§ Signeur est admin: ${signerIsAdmin}`);
    console.log(`üë§ Signeur est emergency: ${signerIsEmergency}`);
    console.log(`üë§ Signeur est operator: ${signerIsOperator}`);

    // Test 3: V√©rifier la version
    const version = await rent2Repay.version();
    console.log(`‚úÖ Version: ${version}`);

    // R√©sum√©
    console.log("\n" + "=".repeat(50));
    console.log("üìä R√âSUM√â DE LA V√âRIFICATION");
    console.log("=".repeat(50));
    console.log(`üìç Contrat: ${deploymentInfo.rent2RepayAddress}`);
    console.log(`üåê R√©seau: ${network.name} (${network.chainId})`);
    console.log(`üí∞ RMM: ${rmm}`);
    console.log(`üèõÔ∏è  Admin: ${deploymentInfo.adminAddress} (${isAdmin ? "‚úÖ" : "‚ùå"})`);
    console.log(`üö® Emergency: ${deploymentInfo.emergencyAddress} (${isEmergency ? "‚úÖ" : "‚ùå"})`);
    console.log(`‚öôÔ∏è  Operator: ${deploymentInfo.operatorAddress} (${isOperator ? "‚úÖ" : "‚ùå"})`);
    console.log(`üíº Treasury: ${treasury}`);
    console.log(`üé´ Tokens actifs: ${activeTokens.length}`);
    console.log(`‚è∏Ô∏è  Pause: ${isPaused ? "Oui" : "Non"}`);
    console.log(`üì¶ Version: ${version}`);

    // Liens utiles
    console.log("\nüîó Liens utiles:");
    console.log(`   üìä Explorer: https://gnosisscan.io/address/${deploymentInfo.rent2RepayAddress}`);
    console.log(`   üß™ Tenderly: https://dashboard.tenderly.co/battistu/rent2repay/infrastructure`);
    console.log("=".repeat(50));

    // V√©rifications critiques
    if (!isAdmin || !isEmergency || !isOperator) {
        console.log("\n‚ö†Ô∏è  ATTENTION: Certains r√¥les ne sont pas correctement configur√©s!");
    }

    if (isPaused) {
        console.log("\n‚ö†Ô∏è  ATTENTION: Le contrat est en pause!");
    }

    if (activeTokens.length === 0) {
        console.log("\n‚ö†Ô∏è  ATTENTION: Aucun token actif configur√©!");
    }

    console.log("\n‚úÖ V√©rification termin√©e!");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Erreur lors de la v√©rification:", error);
        process.exit(1);
    }); 