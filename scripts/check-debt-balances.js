const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    console.log("üîç V√©rification des balances de dette...\n");

    // Charger la configuration d√©ploy√©e
    const configPath = path.join(__dirname, "tmp/", "deployed-contracts.json");
    if (!fs.existsSync(configPath)) {
        throw new Error("‚ùå Fichier de configuration non trouv√©. Ex√©cutez d'abord le script de d√©ploiement.");
    }
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

    // R√©cup√©rer les signers pour avoir les adresses
    const signers = await ethers.getSigners();
    const userAddress = signers[1].address; // USER est √† l'index 1

    // Charger les contrats de dette
    const mockDebtUSDC = await ethers.getContractAt("MockDebtToken", config.contracts.MockDebtUSDC);
    const mockDebtWXDAI = await ethers.getContractAt("MockDebtToken", config.contracts.MockDebtWXDAI);
    const mockUSDC = await ethers.getContractAt("MockERC20", config.contracts.MockUSDC);

    // V√©rifier les adresses des contrats
    console.log("üìã Adresses des contrats:");
    console.log(`   MockDebtUSDC: ${await mockDebtUSDC.getAddress()}`);
    console.log(`   MockDebtWXDAI: ${await mockDebtWXDAI.getAddress()}`);
    console.log(`   MockUSDC: ${await mockUSDC.getAddress()}\n`);

    // V√©rifier les tokens sous-jacents
    console.log("üîó Tokens sous-jacents:");
    console.log(`   USDC: ${await mockDebtUSDC.getUnderlyingAsset()}`);
    console.log(`   WXDAI: ${await mockDebtWXDAI.getUnderlyingAsset()}\n`);

    // V√©rifier les balances initiales
    console.log("üí∞ Balances de dette initiales pour", userAddress);
    const initialDebtUSDCBalance = await mockDebtUSDC.balanceOf(userAddress);
    const initialDebtWXDAIBalance = await mockDebtWXDAI.balanceOf(userAddress);

    console.log(`   Dette USDC: ${ethers.formatEther(initialDebtUSDCBalance)} armmv3USDC`);
    console.log(`   Dette WXDAI: ${ethers.formatEther(initialDebtWXDAIBalance)} armmv3WXDAI\n`);

    // Mint des tokens de dette
    console.log("üè¶ Mint de 100 tokens de dette de chaque type...");
    const mintAmount = ethers.parseEther("100");

    await mockDebtUSDC.mint(userAddress, mintAmount);
    console.log("   ‚úÖ Dette USDC mint√©e");

    await mockDebtWXDAI.mint(userAddress, mintAmount);
    console.log("   ‚úÖ Dette WXDAI mint√©e\n");

    // V√©rifier les nouvelles balances
    console.log("üí∞ Nouvelles balances de dette pour", userAddress);
    const newDebtUSDCBalance = await mockDebtUSDC.balanceOf(userAddress);
    const newDebtWXDAIBalance = await mockDebtWXDAI.balanceOf(userAddress);

    console.log(`   Dette USDC: ${ethers.formatEther(newDebtUSDCBalance)} armmv3USDC`);
    console.log(`   Dette WXDAI: ${ethers.formatEther(newDebtWXDAIBalance)} armmv3WXDAI\n`);

    // Mint des USDC √† l'utilisateur pour le remboursement
    console.log("üí∞ Mint de USDC √† l'utilisateur pour le remboursement...");
    await mockUSDC.mint(userAddress, 10000000); // 10 USDC (6 decimals)
    const usdcBalance = await mockUSDC.balanceOf(userAddress);
    console.log(`   ‚úÖ Balance USDC de l'utilisateur: ${usdcBalance} (6 decimals)\n`);

    // Configurer Rent2Repay pour l'utilisateur
    console.log("üîß Configuration de Rent2Repay pour l'utilisateur...");
    const rent2Repay = await ethers.getContractAt("Rent2Repay", config.contracts.Rent2Repay);

    // V√©rifier et configurer l'adresse DAO treasury si n√©cessaire
    console.log("   üëâ V√©rification de l'adresse DAO treasury...");
    const daoConfig = await rent2Repay.getDaoFeeReductionConfiguration();
    if (daoConfig.treasuryAddress === ethers.ZeroAddress) {
        console.log("   ‚ö†Ô∏è Adresse DAO treasury non d√©finie, configuration avec l'adresse #10...");
        const daoTreasuryAddress = signers[10].address;
        await rent2Repay.updateDaoTreasuryAddress(daoTreasuryAddress);
        console.log(`   ‚úÖ Adresse DAO treasury configur√©e: ${daoTreasuryAddress}`);
    } else {
        console.log(`   ‚úÖ Adresse DAO treasury d√©j√† configur√©e: ${daoConfig.treasuryAddress}`);
    }

    // Configurer une limite hebdomadaire de 100 USDC
    const weeklyLimit = BigInt(10_000_000);
    const periodicity = 1; // 10 secondes pour le test
    console.log("   üëâ Configuration de la limite hebdomadaire...");

    let [maxAmount, lastRepay] = await rent2Repay.getUserConfigForToken(signers[1], config.contracts.MockUSDC);
    console.log('Max set: ', maxAmount);

    await rent2Repay.revokeRent2RepayForToken(config.contracts.MockUSDC);

    try {
        await rent2Repay.connect(signers[1]).configureRent2Repay(
            [config.contracts.MockUSDC], // tokens
            [weeklyLimit],               // montants
            periodicity                  // p√©riodicit√© en secondes
        );
        console.log("   ‚úÖ Configuration Rent2Repay r√©ussie!");
    } catch (error) {
        console.log("   ‚ùå Erreur lors de la configuration:", error.message);
        return;
    }

    [maxAmount, lastRepay] = await rent2Repay.getUserConfigForToken(signers[1], config.contracts.MockUSDC);
    console.log('Max set: ', maxAmount);

    // Approuver le contrat Rent2Repay avec allowance maximale
    console.log("   üëâ Approbation du contrat Rent2Repay avec allowance maximale...");
    const rent2RepayAddress = await rent2Repay.getAddress();
    const currentUSDCAllowance = await mockUSDC.allowance(userAddress, rent2RepayAddress);

    if (currentUSDCAllowance < ethers.MaxUint256) {
        await mockUSDC.connect(signers[1]).approve(rent2RepayAddress, ethers.MaxUint256);
        console.log(`   ‚úÖ Approbation maximale USDC accord√©e au contrat Rent2Repay`);
    } else {
        console.log(`   ‚úÖ Approbation USDC d√©j√† maximale pour Rent2Repay`);
    }

    // Approuver le MockRMM pour les debt tokens (n√©cessaire pour le burn simul√©)
    console.log("   üëâ V√©rification des approbations debt tokens vers MockRMM...");
    const mockRMM = await ethers.getContractAt("MockRMM", config.contracts.MockRMM);
    const mockRMMAddress = await mockRMM.getAddress();

    // Approbation debt USDC vers MockRMM
    const currentDebtUSDCAllowance = await mockDebtUSDC.allowance(userAddress, mockRMMAddress);
    if (currentDebtUSDCAllowance < ethers.MaxUint256) {
        await mockDebtUSDC.connect(signers[1]).approve(mockRMMAddress, ethers.MaxUint256);
        console.log(`   ‚úÖ Approbation maximale debt USDC accord√©e au MockRMM`);
    } else {
        console.log(`   ‚úÖ Approbation debt USDC d√©j√† maximale pour MockRMM`);
    }

    // Approbation debt WXDAI vers MockRMM
    const currentDebtWXDAIAllowance = await mockDebtWXDAI.allowance(userAddress, mockRMMAddress);
    if (currentDebtWXDAIAllowance < ethers.MaxUint256) {
        await mockDebtWXDAI.connect(signers[1]).approve(mockRMMAddress, ethers.MaxUint256);
        console.log(`   ‚úÖ Approbation maximale debt WXDAI accord√©e au MockRMM`);
    } else {
        console.log(`   ‚úÖ Approbation debt WXDAI d√©j√† maximale pour MockRMM`);
    }

    await new Promise(resolve => setTimeout(resolve, periodicity * 1000));


    // Effectuer un remboursement via RUNNER_1
    console.log("\nüîÑ Test de remboursement avec RUNNER_1...");
    const runner1 = signers[2]; // RUNNER_1 √† l'index 2

    // Montant √† rembourser
    const repayAmount = ethers.parseEther("10");

    // L'approbation a d√©j√† √©t√© faite plus haut pour 52x le montant configur√©
    console.log("   üëâ Utilisation de l'approbation d√©j√† accord√©e...");

    try {
        console.log("   üëâ Tentative de remboursement de 10 USDC...");

        // V√©rifications pr√©alables
        console.log("   üìã V√©rifications des conditions:");

        // 1. V√©rifier si l'utilisateur est autoris√©
        const isAuthorized = await rent2Repay.isAuthorizedForToken(userAddress, config.contracts.MockUSDC);
        console.log(`      - Autorisation pour le token: ${isAuthorized ? '‚úÖ' : '‚ùå'}`);

        // 2. V√©rifier la p√©riodicit√©
        const lastRepayTimestamp = (await rent2Repay.lastRepayTimestamps(userAddress)).toString();
        console.log(`      - Dernier remboursement: ${lastRepayTimestamp === '0' ? 'Jamais' : new Date(lastRepayTimestamp * 1000).toLocaleString()}`);

        // 3. V√©rifier la dette
        const debtToken = await rent2Repay.getDebtToken(config.contracts.MockUSDC);
        const debtBalance = await mockDebtUSDC.balanceOf(userAddress);
        console.log(`      - Dette actuelle: ${ethers.formatEther(debtBalance)} USDC`);

        // 4. V√©rifier l'allowance
        const allowance = await mockUSDC.allowance(userAddress, await rent2Repay.getAddress());
        const isMaxAllowance = allowance === ethers.MaxUint256;
        console.log(`      - Allowance USDC: ${isMaxAllowance ? 'MAX (illimit√©e)' : allowance.toString()}`);

        // Tentative de remboursement
        const tx = await rent2Repay.connect(runner1).rent2repay(
            userAddress.toLowerCase(),           // adresse de l'utilisateur (index 1)
            "0x5FbDB2315678afecb367f032d93F642f64180aa3".toLowerCase(), //config.contracts.MockUSDC.toLowerCase(),  // adresse du token USDC
        );
        await tx.wait();
        console.log("   ‚úÖ Remboursement effectu√© avec succ√®s!");

        // V√©rifier la nouvelle balance de dette apr√®s remboursement
        const finalDebtUSDCBalance = await mockDebtUSDC.balanceOf(userAddress);
        console.log(`   üí∞ Nouvelle dette USDC apr√®s remboursement: ${ethers.formatEther(finalDebtUSDCBalance)} armmv3USDC`);
    } catch (error) {
        console.log("   ‚ùå Erreur lors du remboursement:", error.message);
    }
}

main()
    .then(() => process.exit(0))
    .catch(error => {
        console.error("‚ùå Erreur:", error);
        process.exit(1);
    }); 