const { ethers } = require("hardhat");
const { deployMockContracts, deployRent2Repay } = require("./deploy-modular");

async function testLocalDeployment() {
    console.log("üß™ TEST DU D√âPLOIEMENT LOCAL");
    console.log("============================\n");

    const [deployer, user, operator] = await ethers.getSigners();
    console.log("üë§ Deployer:", deployer.address);
    console.log("üë§ User:", user.address);
    console.log("üë§ Operator:", operator.address);

    // 1. D√©ployer les contrats mock
    console.log("\nüì¶ √âTAPE 1: D√©ploiement des contrats Mock");
    const mockContracts = await deployMockContracts();
    const { rmmAddress, supportedAssets } = mockContracts;

    // 2. D√©ployer Rent2Repay avec WXDAI par d√©faut
    console.log("\nüöÄ √âTAPE 2: D√©ploiement de Rent2Repay");
    const rent2repay = await deployRent2Repay(rmmAddress, supportedAssets.WXDAI);

    // 3. Obtenir les instances des contrats
    const mockRMM = await ethers.getContractAt("MockRMM", rmmAddress);
    const wxdaiToken = await ethers.getContractAt("MockERC20", supportedAssets.WXDAI);
    const usdcToken = await ethers.getContractAt("MockERC20", supportedAssets.USDC);

    console.log("\n‚úÖ Contrats d√©ploy√©s avec succ√®s!");
    console.log(`   ‚Ä¢ Rent2Repay: ${await rent2repay.getAddress()}`);
    console.log(`   ‚Ä¢ MockRMM: ${rmmAddress}`);
    console.log(`   ‚Ä¢ WXDAI Mock: ${supportedAssets.WXDAI}`);
    console.log(`   ‚Ä¢ USDC Mock: ${supportedAssets.USDC}`);

    // 4. Tests des fonctionnalit√©s
    console.log("\nüß™ √âTAPE 3: Tests des fonctionnalit√©s");

    // Mint des tokens pour les tests
    await wxdaiToken.mint(user.address, ethers.parseEther("1000"));
    await usdcToken.mint(user.address, ethers.parseEther("1000"));
    console.log("‚úÖ Tokens mint√©s pour l'utilisateur test");

    // Simuler une dette sur le RMM
    await mockRMM.setDebt(user.address, supportedAssets.WXDAI, ethers.parseEther("500"));
    console.log("‚úÖ Dette simul√©e sur le MockRMM");

    // Configuration du Rent2Repay par l'utilisateur
    const weeklyLimit = ethers.parseEther("100");
    await rent2repay.connect(user).configureRent2Repay(weeklyLimit);
    console.log("‚úÖ Rent2Repay configur√© par l'utilisateur");

    // V√©rifier la configuration
    const userConfig = await rent2repay.getUserConfig(user.address);
    console.log(`   ‚Ä¢ Limite hebdomadaire: ${ethers.formatEther(userConfig[0])} WXDAI`);
    console.log(`   ‚Ä¢ Montant disponible: ${ethers.formatEther(await rent2repay.getAvailableAmountThisWeek(user.address))} WXDAI`);

    // Test du remboursement
    console.log("\nüí∞ √âTAPE 4: Test du remboursement");
    const repayAmount = ethers.parseEther("50");

    // Approuver les tokens pour le contrat
    await wxdaiToken.connect(operator).approve(await rent2repay.getAddress(), repayAmount);

    // Mint des tokens pour l'operator
    await wxdaiToken.mint(operator.address, repayAmount);

    // Effectuer le remboursement
    try {
        const tx = await rent2repay.connect(operator).rent2repay(user.address, repayAmount);
        await tx.wait();
        console.log("‚úÖ Remboursement effectu√© avec succ√®s!");

        // V√©rifier le nouveau solde
        const newConfig = await rent2repay.getUserConfig(user.address);
        console.log(`   ‚Ä¢ Montant utilis√© cette semaine: ${ethers.formatEther(newConfig[2])} WXDAI`);
        console.log(`   ‚Ä¢ Montant restant: ${ethers.formatEther(await rent2repay.getAvailableAmountThisWeek(user.address))} WXDAI`);

        // V√©rifier la dette sur le RMM
        const remainingDebt = await mockRMM.getDebt(user.address, supportedAssets.WXDAI);
        console.log(`   ‚Ä¢ Dette restante: ${ethers.formatEther(remainingDebt)} WXDAI`);

    } catch (error) {
        console.error("‚ùå Erreur lors du remboursement:", error.message);
    }

    // Test de changement d'asset
    console.log("\nüîÑ √âTAPE 5: Test de changement d'asset vers USDC");
    try {
        await rent2repay.setRepaymentAsset(supportedAssets.USDC);
        const newAsset = await rent2repay.repaymentAsset();
        console.log(`‚úÖ Asset chang√© vers: ${newAsset}`);
    } catch (error) {
        console.error("‚ùå Erreur lors du changement d'asset:", error.message);
    }

    console.log("\nüéâ TESTS TERMIN√âS AVEC SUCC√àS!");

    return {
        rent2repay: await rent2repay.getAddress(),
        mockRMM: rmmAddress,
        supportedAssets
    };
}

// Fonction pour nettoyer les tests (optionnel)
async function cleanupTests() {
    console.log("üßπ Nettoyage des tests...");
    // Ici on pourrait reset les √©tats si n√©cessaire
}

// Ex√©cution des tests
if (require.main === module) {
    testLocalDeployment()
        .then(() => {
            console.log("\n‚úÖ Tous les tests sont pass√©s!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("\n‚ùå Erreur lors des tests:", error);
            process.exit(1);
        });
}

module.exports = { testLocalDeployment, cleanupTests }; 