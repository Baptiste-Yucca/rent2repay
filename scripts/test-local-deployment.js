const { ethers } = require("hardhat");
const { deployMockContracts, deployRent2Repay } = require("./deploy-modular");

async function testLocalDeployment() {
    console.log("üß™ TEST DU D√âPLOIEMENT LOCAL MULTI-TOKENS");
    console.log("==========================================\n");

    const [deployer, admin, emergency, operator, user, user2] = await ethers.getSigners();
    console.log("üë§ Deployer:", deployer.address);
    console.log("üë§ Admin:", admin.address);
    console.log("üë§ Emergency:", emergency.address);
    console.log("üë§ Operator:", operator.address);
    console.log("üë§ User1:", user.address);
    console.log("üë§ User2:", user2.address);

    // 1. D√©ployer les contrats mock
    console.log("\nüì¶ √âTAPE 1: D√©ploiement des contrats Mock");
    const mockContracts = await deployMockContracts();
    const { rmmAddress, supportedAssets } = mockContracts;

    // 2. D√©ployer Rent2Repay avec WXDAI et USDC
    console.log("\nüöÄ √âTAPE 2: D√©ploiement de Rent2Repay Multi-Tokens");
    const Rent2Repay = await ethers.getContractFactory("Rent2Repay");
    const rent2repay = await Rent2Repay.deploy(
        admin.address,
        emergency.address,
        operator.address,
        rmmAddress,
        supportedAssets.WXDAI,
        supportedAssets.USDC
    );
    await rent2repay.waitForDeployment();

    // 3. Obtenir les instances des contrats
    const mockRMM = await ethers.getContractAt("MockRMM", rmmAddress);
    const wxdaiToken = await ethers.getContractAt("MockERC20", supportedAssets.WXDAI);
    const usdcToken = await ethers.getContractAt("MockERC20", supportedAssets.USDC);

    console.log("\n‚úÖ Contrats d√©ploy√©s avec succ√®s!");
    console.log(`   ‚Ä¢ Rent2Repay: ${await rent2repay.getAddress()}`);
    console.log(`   ‚Ä¢ MockRMM: ${rmmAddress}`);
    console.log(`   ‚Ä¢ WXDAI Mock: ${supportedAssets.WXDAI}`);
    console.log(`   ‚Ä¢ USDC Mock: ${supportedAssets.USDC}`);

    // 4. V√©rifier les tokens autoris√©s
    console.log("\nüîç √âTAPE 3: V√©rification des tokens autoris√©s");
    const authorizedTokens = await rent2repay.getAuthorizedTokens();
    console.log(`‚úÖ Tokens autoris√©s: ${authorizedTokens.length}`);
    console.log(`   ‚Ä¢ WXDAI: ${await rent2repay.authorizedTokens(supportedAssets.WXDAI)}`);
    console.log(`   ‚Ä¢ USDC: ${await rent2repay.authorizedTokens(supportedAssets.USDC)}`);

    // 5. Tests des fonctionnalit√©s multi-tokens
    console.log("\nüß™ √âTAPE 4: Tests des fonctionnalit√©s multi-tokens");

    // Mint des tokens pour les tests
    await wxdaiToken.mint(user.address, ethers.parseEther("1000"));
    await usdcToken.mint(user.address, ethers.parseUnits("1000", 6));
    await wxdaiToken.mint(user2.address, ethers.parseEther("500"));
    await usdcToken.mint(user2.address, ethers.parseUnits("500", 6));
    console.log("‚úÖ Tokens mint√©s pour les utilisateurs test");

    // Simuler des dettes sur le RMM
    await mockRMM.setDebt(user.address, supportedAssets.WXDAI, ethers.parseEther("500"));
    await mockRMM.setDebt(user.address, supportedAssets.USDC, ethers.parseUnits("300", 6));
    await mockRMM.setDebt(user2.address, supportedAssets.WXDAI, ethers.parseEther("200"));
    console.log("‚úÖ Dettes simul√©es sur le MockRMM");

    // Configuration du Rent2Repay par l'utilisateur 1 (multi-tokens)
    console.log("\nüí∞ √âTAPE 5: Configuration multi-tokens par User1");
    const wxdaiWeeklyLimit = ethers.parseEther("100"); // 100 WXDAI par semaine
    const usdcWeeklyLimit = ethers.parseUnits("150", 6); // 150 USDC par semaine

    await rent2repay.connect(user).configureRent2Repay(supportedAssets.WXDAI, wxdaiWeeklyLimit);
    await rent2repay.connect(user).configureRent2Repay(supportedAssets.USDC, usdcWeeklyLimit);
    console.log("‚úÖ Rent2Repay configur√© pour WXDAI et USDC");

    // V√©rifier les configurations
    const wxdaiConfig = await rent2repay.getUserConfigForToken(user.address, supportedAssets.WXDAI);
    const usdcConfig = await rent2repay.getUserConfigForToken(user.address, supportedAssets.USDC);
    console.log(`   ‚Ä¢ Limite WXDAI: ${ethers.formatEther(wxdaiConfig[0])} WXDAI/semaine`);
    console.log(`   ‚Ä¢ Limite USDC: ${ethers.formatUnits(usdcConfig[0], 6)} USDC/semaine`);
    console.log(`   ‚Ä¢ Disponible WXDAI: ${ethers.formatEther(await rent2repay.getAvailableAmountThisWeek(user.address, supportedAssets.WXDAI))} WXDAI`);
    console.log(`   ‚Ä¢ Disponible USDC: ${ethers.formatUnits(await rent2repay.getAvailableAmountThisWeek(user.address, supportedAssets.USDC), 6)} USDC`);

    // Configuration par batch (User2)
    console.log("\nüîÑ √âTAPE 6: Configuration par batch pour User2");
    const tokens = [supportedAssets.WXDAI, supportedAssets.USDC];
    const amounts = [ethers.parseEther("50"), ethers.parseUnits("75", 6)];

    await rent2repay.connect(user2).configureRent2RepayMultiple(tokens, amounts);
    console.log("‚úÖ Configuration batch r√©ussie pour User2");

    const user2Configs = await rent2repay.getUserConfigs(user2.address);
    console.log(`   ‚Ä¢ Tokens configur√©s: ${user2Configs[0].length}`);
    console.log(`   ‚Ä¢ WXDAI: ${ethers.formatEther(user2Configs[1][0])} par semaine`);
    console.log(`   ‚Ä¢ USDC: ${ethers.formatUnits(user2Configs[1][1], 6)} par semaine`);

    // Test du remboursement WXDAI
    console.log("\nüí∏ √âTAPE 7: Test du remboursement WXDAI");
    const wxdaiRepayAmount = ethers.parseEther("50");

    // Mint et approve tokens pour l'operator
    await wxdaiToken.mint(operator.address, wxdaiRepayAmount);
    await wxdaiToken.connect(operator).approve(await rent2repay.getAddress(), wxdaiRepayAmount);

    try {
        const tx = await rent2repay.connect(operator).rent2repay(
            user.address,
            supportedAssets.WXDAI,
            wxdaiRepayAmount
        );
        await tx.wait();
        console.log("‚úÖ Remboursement WXDAI effectu√© avec succ√®s!");

        // V√©rifier le nouveau solde
        const newWxdaiConfig = await rent2repay.getUserConfigForToken(user.address, supportedAssets.WXDAI);
        console.log(`   ‚Ä¢ WXDAI utilis√© cette semaine: ${ethers.formatEther(newWxdaiConfig[1])} WXDAI`);
        console.log(`   ‚Ä¢ WXDAI restant: ${ethers.formatEther(await rent2repay.getAvailableAmountThisWeek(user.address, supportedAssets.WXDAI))} WXDAI`);

        // V√©rifier la dette sur le RMM
        const remainingWxdaiDebt = await mockRMM.getDebt(user.address, supportedAssets.WXDAI);
        console.log(`   ‚Ä¢ Dette WXDAI restante: ${ethers.formatEther(remainingWxdaiDebt)} WXDAI`);

    } catch (error) {
        console.error("‚ùå Erreur lors du remboursement WXDAI:", error.message);
    }

    // Test du remboursement USDC
    console.log("\nüí∏ √âTAPE 8: Test du remboursement USDC");
    const usdcRepayAmount = ethers.parseUnits("75", 6);

    await usdcToken.mint(operator.address, usdcRepayAmount);
    await usdcToken.connect(operator).approve(await rent2repay.getAddress(), usdcRepayAmount);

    try {
        const tx = await rent2repay.connect(operator).rent2repay(
            user.address,
            supportedAssets.USDC,
            usdcRepayAmount
        );
        await tx.wait();
        console.log("‚úÖ Remboursement USDC effectu√© avec succ√®s!");

        // V√©rifier le nouveau solde
        const newUsdcConfig = await rent2repay.getUserConfigForToken(user.address, supportedAssets.USDC);
        console.log(`   ‚Ä¢ USDC utilis√© cette semaine: ${ethers.formatUnits(newUsdcConfig[1], 6)} USDC`);
        console.log(`   ‚Ä¢ USDC restant: ${ethers.formatUnits(await rent2repay.getAvailableAmountThisWeek(user.address, supportedAssets.USDC), 6)} USDC`);

        // V√©rifier la dette sur le RMM
        const remainingUsdcDebt = await mockRMM.getDebt(user.address, supportedAssets.USDC);
        console.log(`   ‚Ä¢ Dette USDC restante: ${ethers.formatUnits(remainingUsdcDebt, 6)} USDC`);

    } catch (error) {
        console.error("‚ùå Erreur lors du remboursement USDC:", error.message);
    }

    // Test de gestion des tokens par admin
    console.log("\nüîë √âTAPE 9: Test de gestion des tokens par admin");

    // Cr√©er un nouveau token
    const MockERC20 = await ethers.getContractFactory("MockERC20");
    const newToken = await MockERC20.deploy("New Token", "NEW");
    await newToken.waitForDeployment();

    try {
        // Autoriser le nouveau token
        await rent2repay.connect(admin).authorizeToken(await newToken.getAddress());
        console.log("‚úÖ Nouveau token autoris√© par l'admin");

        // V√©rifier qu'il est dans la liste
        const updatedTokens = await rent2repay.getAuthorizedTokens();
        console.log(`   ‚Ä¢ Tokens autoris√©s maintenant: ${updatedTokens.length}`);

        // D√©sautoriser le token
        await rent2repay.connect(admin).unauthorizeToken(await newToken.getAddress());
        console.log("‚úÖ Token d√©sautoris√© par l'admin");

    } catch (error) {
        console.error("‚ùå Erreur lors de la gestion des tokens:", error.message);
    }

    // Test des fonctions de r√©vocation
    console.log("\nüö´ √âTAPE 10: Test des fonctions de r√©vocation");

    try {
        // R√©vocation d'un token sp√©cifique
        await rent2repay.connect(user).revokeRent2RepayForToken(supportedAssets.USDC);
        console.log("‚úÖ R√©vocation USDC par l'utilisateur");

        // V√©rifier le statut
        console.log(`   ‚Ä¢ User autoris√© WXDAI: ${await rent2repay.isAuthorizedForToken(user.address, supportedAssets.WXDAI)}`);
        console.log(`   ‚Ä¢ User autoris√© USDC: ${await rent2repay.isAuthorizedForToken(user.address, supportedAssets.USDC)}`);
        console.log(`   ‚Ä¢ User autoris√© global: ${await rent2repay.isAuthorized(user.address)}`);

        // R√©vocation totale
        await rent2repay.connect(user).revokeRent2RepayAll();
        console.log("‚úÖ R√©vocation totale par l'utilisateur");
        console.log(`   ‚Ä¢ User autoris√© global: ${await rent2repay.isAuthorized(user.address)}`);

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©vocation:", error.message);
    }

    console.log("\nüéâ Tests multi-tokens termin√©s avec succ√®s!");
    console.log("\nüìä R√âSUM√â DES FONCTIONNALIT√âS TEST√âES:");
    console.log("‚úÖ D√©ploiement avec tokens WXDAI et USDC pr√©autoris√©s");
    console.log("‚úÖ Configuration individuelle par token");
    console.log("‚úÖ Configuration par batch (plusieurs tokens)");
    console.log("‚úÖ Remboursements s√©par√©s par token");
    console.log("‚úÖ Limites hebdomadaires ind√©pendantes");
    console.log("‚úÖ Gestion des tokens autoris√©s par admin");
    console.log("‚úÖ R√©vocation par token et r√©vocation totale");
    console.log("‚úÖ V√©rification des statuts d'autorisation");
}

// Fonction pour nettoyer les tests (optionnel)
async function cleanupTests() {
    console.log("üßπ Nettoyage des tests...");
    // Ici on pourrait reset les √©tats si n√©cessaire
}

// Ex√©cution des tests
if (require.main === module) {
    testLocalDeployment()
        .then(() => {
            console.log("\n‚ú® Tous les tests multi-tokens sont pass√©s!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("\n‚ùå Erreur lors des tests:", error);
            process.exit(1);
        });
}

module.exports = { testLocalDeployment, cleanupTests }; 