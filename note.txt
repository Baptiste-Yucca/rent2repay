Si on veut utiliser withdraw(), il faut appeler la fonciton avec le nombdre de armmToken pour avoir le montant attendu.

/**
 * @notice Calcule le montant de liquidity tokens (ex: aUSDC) à retirer pour obtenir un montant donné de stablecoins
 * @param user L'adresse de l'utilisateur
 * @param stableToken Adresse du token stable (ex: USDC)
 * @param amountStable Le montant souhaité en stablecoin
 * @return liquidityAmount Le montant de aTokens à retirer via withdraw()
 */
function _getLiquidityTokenAmountToWithdraw(
    address user,
    address stableToken,
    uint256 amountStable
) internal view returns (uint256 liquidityAmount) {
    address supplyToken = tokenToSupplyToken[stableToken];
    if (supplyToken == address(0)) revert("No supply token found");

    uint256 realBalance = IERC20(supplyToken).balanceOf(user);
    uint256 scaledBalance = IScaledBalanceToken(supplyToken).scaledBalanceOf(user);

    if (realBalance == 0 || scaledBalance == 0) revert("Invalid balances");

    // liquidityAmount = amountStable * scaled / real
    liquidityAmount = (amountStable * scaledBalance) / realBalance;
}


Exemple on veut 11 USDC mais l'utilisateur à 100 armmtoken (scaledBalanceOf) d'une valeur de 110 USDC BalanceOf)

ilf aut faire 11*110 /100 = 10 
donc en input il faudrait 10 armmToken à rmm.withdrawn().   

Probleme armmToken peuvent être déplacer ... trouver la fonction qui donne l'index pour un user

Semble OK, fonciton _transfer armmToken  function _transfer(
    address sender,
    address recipient,
    uint128 amount
  ) internal virtual {
    uint128 oldSenderBalance = _userState[sender].balance;
    _userState[sender].balance = oldSenderBalance - amount;
    uint128 oldRecipientBalance = _userState[recipient].balance;
    _userState[recipient].balance = oldRecipientBalance + amount;

    IRmmIncentivesController incentivesControllerLocal = _incentivesController;
    if (address(incentivesControllerLocal) != address(0)) {
      uint256 currentTotalSupply = _totalSupply;
      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
      if (sender != recipient) {
        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
      }
    }
  }


LIQUIDITY INDEX param 2 de la struct.... 
  autre methode calculer liquidité index 
    /// @inheritdoc IPool
  function getReserveData(address asset)
    external
    view
    virtual
    override
    returns (DataTypes.ReserveData memory)
  {
    return _reserves[asset];
  }

struct ReserveData {
    //stores the reserve configuration
    ReserveConfigurationMap configuration;
    //the liquidity index. Expressed in ray
    uint128 liquidityIndex;
    //the current supply rate. Expressed in ray
    uint128 currentLiquidityRate;
    //variable borrow index. Expressed in ray
    uint128 variableBorrowIndex;
    //the current variable borrow rate. Expressed in ray
    uint128 currentVariableBorrowRate;
    //the current stable borrow rate. Expressed in ray
    uint128 currentStableBorrowRate;
    //timestamp of last update
    uint40 lastUpdateTimestamp;
    //the id of the reserve. Represents the position in the list of the active reserves
    uint16 id;
    //aToken address
    address aTokenAddress;
    //stableDebtToken address
    address stableDebtTokenAddress;
    //variableDebtToken address
    address variableDebtTokenAddress;
    //address of the interest rate strategy
    address interestRateStrategyAddress;
    //the current treasury balance, scaled
    uint128 accruedToTreasury;
    //the outstanding unbacked aTokens minted through the bridging feature
    uint128 unbacked;
    //the outstanding debt borrowed against this asset in isolation mode
    uint128 isolationModeTotalDebt;
  }

  struct ReserveConfigurationMap {
    //bit 0-15: LTV
    //bit 16-31: Liq. threshold
    //bit 32-47: Liq. bonus
    //bit 48-55: Decimals
    //bit 56: reserve is active
    //bit 57: reserve is frozen
    //bit 58: borrowing is enabled
    //bit 59: stable rate borrowing enabled
    //bit 60: asset is paused
    //bit 61: borrowing in isolation mode is enabled
    //bit 62-63: reserved
    //bit 64-79: reserve factor
    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
    //bit 152-167 liquidation protocol fee
    //bit 168-175 eMode category
    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
    //bit 252-255 unused

    uint256 data;
  }
