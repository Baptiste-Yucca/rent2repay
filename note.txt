Si on veut utiliser withdraw(), il faut appeler la fonciton avec le nombdre de armmToken pour avoir le montant attendu.

/**
 * @notice Calcule le montant de liquidity tokens (ex: aUSDC) à retirer pour obtenir un montant donné de stablecoins
 * @param user L'adresse de l'utilisateur
 * @param stableToken Adresse du token stable (ex: USDC)
 * @param amountStable Le montant souhaité en stablecoin
 * @return liquidityAmount Le montant de aTokens à retirer via withdraw()
 */
function _getLiquidityTokenAmountToWithdraw(
    address user,
    address stableToken,
    uint256 amountStable
) internal view returns (uint256 liquidityAmount) {
    address supplyToken = tokenToSupplyToken[stableToken];
    if (supplyToken == address(0)) revert("No supply token found");

    uint256 realBalance = IERC20(supplyToken).balanceOf(user);
    uint256 scaledBalance = IScaledBalanceToken(supplyToken).scaledBalanceOf(user);

    if (realBalance == 0 || scaledBalance == 0) revert("Invalid balances");

    // liquidityAmount = amountStable * scaled / real
    liquidityAmount = (amountStable * scaledBalance) / realBalance;
}


Exemple on veut 11 USDC mais l'utilisateur à 100 armmtoken (scaledBalanceOf) d'une valeur de 110 USDC BalanceOf)

ilf aut faire 11*110 /100 = 10 
donc en input il faudrait 10 armmToken à rmm.withdrawn().   

Probleme armmToken peuvent être déplacer ... trouver la fonction qui donne l'index pour un user

Semble OK, fonciton _transfer armmToken  function _transfer(
    address sender,
    address recipient,
    uint128 amount
  ) internal virtual {
    uint128 oldSenderBalance = _userState[sender].balance;
    _userState[sender].balance = oldSenderBalance - amount;
    uint128 oldRecipientBalance = _userState[recipient].balance;
    _userState[recipient].balance = oldRecipientBalance + amount;

    IRmmIncentivesController incentivesControllerLocal = _incentivesController;
    if (address(incentivesControllerLocal) != address(0)) {
      uint256 currentTotalSupply = _totalSupply;
      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
      if (sender != recipient) {
        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
      }
    }
  }