{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.24\"},\"sources\":{\"contracts/Rent2Repay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRMM.sol\\\";\\n\\n/**\\n * @title Rent2Repay\\n * @notice A contract that manages authorization for the Rent2Repay mechanism\\n * with multi-token support\\n * @dev This contract allows users to configure weekly spending limits per token\\n * for automated repayments. Users can set a maximum amount per token that can be\\n * spent per week and tracks usage separately\\n */\\ncontract Rent2Repay is \\n    Initializable, \\n    AccessControlUpgradeable, \\n    PausableUpgradeable, \\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable \\n{\\n   \\n    /// @notice Role definitions\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    struct TokenConfig {\\n        address token;\\n        address supplyToken;\\n        bool active;\\n    }\\n\\n    /// @custom:storage-location erc7201:rent2repay.storage\\n    struct Rent2RepayStorage {\\n        /// @notice RMM contract interface\\n        IRMM rmm;\\n        \\n        /// @notice Default interest rate mode (2 = Variable rate)\\n        uint256 defaultInterestRateMode;\\n\\n        /// @notice Maps user addresses to token addresses to their weekly maximum amount\\n        mapping(address => mapping(address => uint256)) allowedMaxAmounts;\\n        \\n        /// @notice Maps user addresses to their last repayment timestamp (shared across all tokens)\\n        mapping(address => uint256) lastRepayTimestamps;\\n\\n        /// @notice Maps user addresses to token addresses to their periodicity\\n        mapping(address => mapping(address => uint256)) periodicity;\\n        \\n        /// @notice Maps token addresses to their debt token addresses\\n        mapping(address => TokenConfig) tokenConfig;\\n\\n        /// @notice Array to keep track of all tokens that have been configured at least once\\n        /// @dev Use tokenConfig[token].active to check if a token is currently active\\n        address[] tokenList;\\n\\n        /// @notice DAO fees in basis points (BPS) - 10000 = 100%\\n        uint256 daoFeesBPS;\\n        \\n        /// @notice Sender tips in basis points (BPS) - 10000 = 100%\\n        uint256 senderTipsBPS;\\n\\n        /// @notice Token address for DAO fee reduction - if user holds this token above minimum \\n        /// amount, DAO fees are reduced\\n        address daoFeeReductionToken;\\n        \\n        /// @notice Minimum amount of daoFeeReductionToken required to get DAO fee reduction\\n        uint256 daoFeeReductionMinimumAmount;\\n\\n        /// @notice DAO fee reduction percentage in basis points (BPS) - 10000 = 100% \\n        uint256 daoFeeReductionBPS;\\n\\n        /// @notice DAO treasury address that receives DAO fees\\n        address daoTreasuryAddress;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _getR2rStorage() \\n        private \\n        pure \\n        returns (Rent2RepayStorage storage $) \\n    {\\n        assembly {\\n            $.slot := 0x52C63247E1F47d19d5ce046630c49f7C67dcaEcfb71ba98eedaab2ebca6e0\\n        }\\n    }\\n\\n    /// @notice Emitted when a user revokes all their Rent2Repay authorizations\\n    /// @param user The user address that revoked all authorizations\\n    event RevokedR2R (address indexed user);\\n\\n    /// @notice Emitted when a user configure all their Rent2Repay authorizations\\n    /// @param user The user address that revoked all authorizations\\n    event ConfiguredR2R (address indexed user);\\n\\n\\n    /// @notice Custom errors for better gas efficiency\\n    error UserNotAuthorized();\\n    error InvalidTokenAddress();\\n    error TokenNotAuthorized();\\n    error InvalidFeesBPS();\\n    error InvalidTipsBPS();\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with roles, RMM integration and initial authorized tokens\\n     * @param admin Address that will have admin privileges\\n     * @param emergency Address that will have emergency privileges\\n     * @param operator Address that will have operator privileges\\n     * @param _rmm Address of the RMM contract\\n     * @param wxdaiToken Address of the WXDAI token\\n     * @param wxdaiArmmToken Address of the WXDAI supply token\\n     * @param usdcToken Address of the USDC token\\n     * @param usdcArmmToken Address of the USDC supply token\\n     */\\n    function initialize(\\n        address admin, \\n        address emergency, \\n        address operator,\\n        address _rmm,\\n        address wxdaiToken,\\n        address wxdaiArmmToken,\\n        address usdcToken,\\n        address usdcArmmToken\\n    ) external initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(ADMIN_ROLE, admin);\\n        _grantRole(EMERGENCY_ROLE, emergency);\\n        _grantRole(OPERATOR_ROLE, operator);\\n        \\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.rmm = IRMM(_rmm);\\n        \\n        /// @dev Initialize default fee values\\n        $.daoFeesBPS = 50; /// @dev 0.5% default\\n        $.senderTipsBPS = 25; /// @dev 0.25% default\\n        $.daoFeeReductionBPS = 5000; /// @dev 50% default\\n        $.defaultInterestRateMode = 2; /// @dev Default interest rate mode (2 = Variable rate)\\n        \\n        /// @dev Initialize with WXDAI and USDC as authorized token pairs\\n        _authorizeTokenPair(wxdaiToken, wxdaiArmmToken);\\n        _authorizeTokenPair(usdcToken, usdcArmmToken);\\n    }\\n\\n    /**\\n     * @notice Validates that a user has configured Rent2Repay for any token\\n     * @param user The user address to validate\\n     */\\n    modifier userIsAuthorized(address user) {\\n        if (!isAuthorized(user)) revert UserNotAuthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that a token address is not the zero address\\n     * @param token The token address to validate\\n     */\\n    modifier validTokenAddress(address token) {\\n        if (token == address(0)) revert InvalidTokenAddress();\\n        _;\\n    }\\n    \\n    /**\\n     * @notice Validates that a token is authorized\\n     * @param token The token address to validate\\n     */\\n    modifier onlyAuthorizedToken(address token) {\\n        if (!_getR2rStorage().tokenConfig[token].active) revert TokenNotAuthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Configures the Rent2Repay mechanism for one or multiple tokens\\n     * @param tokens Array of token addresses to configure (can contain just one token)\\n     * @param amounts Array of maximum amounts per week for each token\\n     */\\n    function configureRent2Repay(\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256  period,\\n        uint256  timestamp\\n    ) external whenNotPaused {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        uint256 len = tokens.length;\\n        require(len > 0 && len == amounts.length, \\\"Invalid array lengths\\\");\\n            \\n        /// @dev Force to clean up data\\n        uint256 maxLength = $.tokenList.length;\\n        for (uint256 i = 0; i < maxLength;) {\\n            $.allowedMaxAmounts[msg.sender][$.tokenList[i]] = 0;\\n            $.periodicity[msg.sender][$.tokenList[i]] = 0;\\n            unchecked { ++i; }\\n        }\\n        \\n        /// @dev Valorize values\\n        for (uint256 i = 0; i < len;) {\\n            require(tokens[i] != address(0) && $.tokenConfig[tokens[i]].active && amounts[i] > 0,\\n                \\\"Invalid token or amount\\\");\\n            $.allowedMaxAmounts[msg.sender][tokens[i]] = amounts[i];\\n            $.periodicity[msg.sender][tokens[i]] = period == 0 ? 1 weeks : period;\\n            unchecked { ++i; }\\n        }\\n        \\n        /// @dev Initialize/activate user with timestamp (0 = inactive, !=0 = active)\\n        $.lastRepayTimestamps[msg.sender] = timestamp > 0 ? timestamp : 1;\\n        \\n        emit ConfiguredR2R(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Revokes the Rent2Repay authorization for all tokens\\n     */\\n    function revokeRent2RepayAll() external userIsAuthorized(msg.sender) {\\n        _removeUserAllTokens(msg.sender);\\n        \\n    }\\n\\n    /**\\n     * @notice Allows operators to remove a user from the system (all tokens)\\n     * @dev Only operators can force-remove users\\n     * @param user The user to remove\\n     */\\n    function removeUser(address user) \\n        external \\n        onlyRole(OPERATOR_ROLE) \\n        userIsAuthorized(user) \\n    {\\n        _removeUserAllTokens(user);\\n        emit RevokedR2R(user);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract - only emergency role can do this\\n     */\\n    function pause() external onlyRole(EMERGENCY_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract - only ADMIN (DAO) role can do this\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Checks if a user has authorized the Rent2Repay mechanism\\n     * @param user Address of the user to check\\n     * @return true if authorized, false otherwise\\n     */\\n    function isAuthorized(address user) public view returns (bool) {\\n        return _getR2rStorage().lastRepayTimestamps[user] != 0;\\n    }\\n    \\n\\n    /**\\n     * @notice Helper function to perform security checks and configuration validation\\n     * @dev Validates user authorization and token configuration\\n     * @param user The user address to validate\\n     * @param token The token address to validate\\n     */\\n    function _validateUserAndToken(address user, address token) internal view {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        require($.lastRepayTimestamps[user] != 0, \\\"User not authorized\\\");\\n        require($.allowedMaxAmounts[user][token] > 0, \\\"User not configured for token\\\");\\n        require($.periodicity[user][token] > 0, \\\"Periodicity not set\\\");\\n        require(_isNewPeriod(user, token), \\\"Wait next period\\\");\\n    }\\n\\n    /**\\n     * @notice Internal function to process a single user repayment\\n     * @dev Contains the common logic for both rent2repay and batchRent2Repay\\n     * @param user The user address to process repayment for\\n     * @param token The token address to process\\n     * @return adjustedDaoFees The DAO fees after adjustment for any difference\\n     * @return senderTips The sender tips amount\\n     * @return actualAmountRepaid The actual amount repaid to RMM\\n     */\\n    function _processUserRepayment(address user, address token) \\n        internal \\n        returns (uint256 adjustedDaoFees, uint256 senderTips, uint256 actualAmountRepaid) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        _validateUserAndToken(user, token);\\n        \\n        /// @dev Step 1: Calculate and transfer tokens\\n        uint256 daoFees;\\n        uint256 amountForRepayment;\\n        (daoFees, senderTips, amountForRepayment) = _handleTokenTransferAndFees(user, token);\\n        \\n        /// @dev Step 2: Perform RMM repayment and adjust fees\\n        (actualAmountRepaid, adjustedDaoFees) = _handleRmmRepayment(\\n            user, token, daoFees, amountForRepayment\\n        );\\n        \\n        $.lastRepayTimestamps[user] = block.timestamp;\\n        /// @dev No emit, transfer ERC20, track them from TheGraph\\n    }\\n\\n    /**\\n     * @notice Internal function to handle token transfer and fee calculation\\n     * @dev Reduces stack depth by separating token transfer logic\\n     * @param user The user address\\n     * @param token The token address\\n     * @return daoFees The calculated DAO fees\\n     * @return senderTips The calculated sender tips\\n     * @return amountForRepayment The amount to be used for repayment\\n     */\\n    function _handleTokenTransferAndFees(address user, address token) \\n        internal \\n        returns (uint256 daoFees, uint256 senderTips, uint256 amountForRepayment) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        uint256 amount = $.allowedMaxAmounts[user][token];\\n        uint256 balance = IERC20(token).balanceOf(user);\\n        uint256 toTransfer = balance < amount ? balance : amount;\\n\\n        (daoFees, senderTips, amountForRepayment) = _calculateFees(toTransfer, user);\\n\\n        require(\\n            IERC20(token).transferFrom(user, address(this), toTransfer),\\n            \\\"transferFrom to R2R failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function to handle RMM repayment\\n     * @dev Reduces stack depth by separating RMM interaction logic\\n     * @param user The user address\\n     * @param token The token address\\n     * @param daoFees The DAO fees amount\\n     * @param amountForRepayment The amount to be used for repayment\\n     * @return actualAmountRepaid The actual amount repaid to RMM\\n     * @return adjustedDaoFees The DAO fees after adjustment for any difference\\n     */\\n    function _handleRmmRepayment(\\n        address user, \\n        address token, \\n        uint256 daoFees,\\n        uint256 amountForRepayment\\n    ) \\n        internal \\n        returns (uint256 actualAmountRepaid, uint256 adjustedDaoFees) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n\\n        if($.tokenConfig[token].supplyToken == token) {\\n            /// @dev Note: if fail, revert all\\n            require(\\n                $.rmm.withdraw(\\n                    $.tokenConfig[token].token, \\n                    amountForRepayment, \\n                    address(this)\\n                ) == amountForRepayment, \\n                \\\"Withdrawn amount mismatch\\\"\\n            );\\n        }\\n        \\n        actualAmountRepaid = $.rmm.repay(\\n            $.tokenConfig[token].token,\\n            amountForRepayment,\\n            $.defaultInterestRateMode,\\n            user\\n        );\\n\\n        uint256 difference = amountForRepayment - actualAmountRepaid;\\n        if(difference > 0) {\\n            require(\\n                IERC20($.tokenConfig[token].token).transfer(user, difference),\\n                \\\"transfer to user failed\\\"\\n            );\\n        }\\n\\n        /// @dev Adjust fees if there is difference\\n        adjustedDaoFees = daoFees;\\n        if(difference > 0) {\\n            adjustedDaoFees = daoFees > difference ? daoFees - difference : 0; \\n        }\\n    }\\n\\n    function rent2repay(address user, address token) \\n        external \\n        whenNotPaused\\n        validTokenAddress(token)\\n        onlyAuthorizedToken(token)\\n        nonReentrant\\n    {\\n        (\\n            uint256 adjustedDaoFees,\\n            uint256 senderTips,\\n            \\n        ) = _processUserRepayment(user, token);\\n\\n        /// @dev Transfer fees to respective addresses\\n        _transferFees(token, adjustedDaoFees, senderTips);\\n    }\\n\\n    function batchRent2Repay(address[] calldata users, address token) \\n        external \\n        whenNotPaused\\n        validTokenAddress(token)\\n        onlyAuthorizedToken(token)\\n        nonReentrant\\n    {\\n        uint256 totalDaoFees;\\n        uint256 totalSenderTips;\\n        uint256 adjustedDaoFees;\\n        uint256 senderTips;\\n        address user ;\\n     \\n        \\n        for (uint256 i = 0; i < users.length;) {\\n            user = users[i];\\n            require(user != address(0), \\\"Invalid user address\\\");\\n            \\n            (\\n                adjustedDaoFees,\\n                senderTips,\\n                \\n            ) = _processUserRepayment(user, token);\\n\\n            totalDaoFees += adjustedDaoFees;\\n            totalSenderTips += senderTips;\\n\\n            unchecked { ++i; }\\n        }\\n        \\n        if (totalDaoFees > 0 || totalSenderTips > 0) {\\n            _transferFees(token, totalDaoFees, totalSenderTips);\\n        }\\n    }\\n\\n    function whoami() external view returns (bool isAdmin, bool isOperator, bool isEmergency) {\\n        return (\\n          hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n          hasRole(OPERATOR_ROLE, msg.sender),\\n          hasRole(EMERGENCY_ROLE, msg.sender)\\n        );\\n    }\\n\\n    /**\\n     * @notice Retrieves all authorized tokens and their configurations for a user\\n     * @param user Address of the user\\n     * @return tokens Array of authorized token addresses\\n     * @return maxAmounts Array of weekly max amounts for each token\\n     */\\n    function getUserConfigs(address user)\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory maxAmounts\\n        )\\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        /// @dev If user is not authorized, return empty arrays\\n        if ($.lastRepayTimestamps[user] == 0) {\\n            return (new address[](0), new uint256[](0));\\n        }\\n\\n        uint256 maxLength = $.tokenList.length;\\n        tokens = new address[](maxLength);\\n        maxAmounts = new uint256[](maxLength);\\n\\n        uint256 index;\\n        for (uint256 i = 0; i < maxLength; ) {\\n            if (\\n                $.tokenConfig[$.tokenList[i]].active &&\\n                $.allowedMaxAmounts[user][$.tokenList[i]] > 0\\n            ) {\\n                tokens[index] = $.tokenList[i];\\n                maxAmounts[index] = $.allowedMaxAmounts[user][$.tokenList[i]];\\n                unchecked { ++index; }\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        assembly {\\n            mstore(tokens, index)\\n            mstore(maxAmounts, index)\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows admins to authorize a new token pair\\n     * @param token The token address to authorize\\n     * @param supplyToken The supply token address associated with the token\\n     */\\n    function authorizeTokenPair(address token, address supplyToken) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        _authorizeTokenPair(token, supplyToken);\\n    }\\n\\n    /**\\n     * @notice Internal function to authorize a token pair\\n     * @param token The token address to authorize\\n     * @param supplyToken The supply token address associated with the token\\n     */\\n    function _authorizeTokenPair(address token, address supplyToken) internal {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        TokenConfig memory config = TokenConfig({\\n            token: token,\\n            supplyToken: supplyToken,\\n            active: true\\n        });\\n        \\n        $.tokenConfig[token] = config;\\n        $.tokenConfig[supplyToken] = config;\\n        $.tokenList.push(token);\\n    }\\n\\n    /**\\n     * @notice Allows admins to unauthorize a token\\n     * @param token The token address to unauthorize\\n     */\\n    function unauthorizeToken(address token) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.tokenConfig[token].active = false;\\n        $.tokenConfig[$.tokenConfig[token].supplyToken].active = false;\\n\\n        /// @dev Token remains in tokenList for historical tracking\\n        /// @dev Use tokenConfig[token].active to check current status\\n    }\\n\\n    /**\\n     * @notice Allows admins to give approval for tokens to external contracts\\n     * @dev This function must be called before using rent2repay functions to approve tokens to RMM\\n     * @param token The token address to approve\\n     * @param spender The address that will be approved to spend the tokens (e.g., RMM contract)\\n     * @param amount The amount to approve (use type(uint256).max for unlimited approval)\\n     */\\n    function giveApproval(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) \\n        external \\n        onlyRole(ADMIN_ROLE)\\n    {\\n        require(spender != address(0), \\\"Invalid spender address\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        \\n        require(\\n            IERC20(token).approve(spender, amount),\\n            \\\"Approval failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function to remove a user from the system for all tokens\\n     * @dev Optimized: Only disable user globally via timestamp (massive gas savings)\\n     * @param user The user to remove\\n     */\\n    function _removeUserAllTokens(address user) internal {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        // Nettoyer le timestamp (désactive l'utilisateur)\\n        $.lastRepayTimestamps[user] = 0;\\n        \\n        // Nettoyer les configurations pour tous les tokens\\n        uint256 maxLength = $.tokenList.length;\\n        for (uint256 i = 0; i < maxLength;) {\\n            $.allowedMaxAmounts[user][$.tokenList[i]] = 0;\\n            $.periodicity[user][$.tokenList[i]] = 0;\\n            unchecked { ++i; }\\n        }\\n        \\n        emit RevokedR2R(user);\\n    }\\n\\n    /**\\n     * @notice Internal function to check if a new week has started\\n     * @param _user The user address\\n     * @param _token The token address\\n     * @return true if more than a week has passed since lastTimestamp\\n     */\\n    function _isNewPeriod(address _user, address _token) internal view returns (bool) {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        return block.timestamp >= $.lastRepayTimestamps[_user] + $.periodicity[_user][_token];\\n    }\\n\\n    /**\\n     * @notice Internal function to calculate fees for a given amount\\n     * @param amount The amount to calculate fees for\\n     * @param user The user address to check for DAO fee reduction\\n     * @return daoFees The DAO fees amount\\n     * @return senderTips The sender tips amount\\n     * @return amountForRepayment The amount remaining for repayment\\n     */\\n    function _calculateFees(uint256 amount, address user) internal view returns (\\n        uint256 daoFees,\\n        uint256 senderTips,\\n        uint256 amountForRepayment\\n    ) {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        /// @dev Calculate base fees\\n        daoFees = (amount * $.daoFeesBPS) / 10000;\\n        senderTips = (amount * $.senderTipsBPS) / 10000;\\n\\n        if ($.daoFeeReductionToken != address(0) && $.daoFeeReductionMinimumAmount > 0) {\\n            uint256 userBalance = IERC20($.daoFeeReductionToken).balanceOf(user);\\n            if (userBalance >= $.daoFeeReductionMinimumAmount) {\\n                /// @dev Reduce DAO fees by the configured percentage (BPS)\\n                uint256 reductionAmount = (daoFees * $.daoFeeReductionBPS) / 10000;\\n                daoFees = daoFees - reductionAmount;\\n            }\\n        }\\n        \\n        uint256 totalFees = daoFees + senderTips;   \\n        if(totalFees > amount) revert(\\\"Exceed amount\\\");\\n        amountForRepayment = amount - totalFees;\\n    }\\n\\n    /**\\n     * @notice Emergency function to recover tokens sent to this contract\\n     * @param token The token to recover\\n     * @param amount The amount to recover\\n     * @param to The address to send recovered tokens to\\n     */\\n    function emergencyTokenRecovery(\\n        address token, \\n        uint256 amount, \\n        address to\\n    ) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Allows admin to update DAO fees\\n     * @param newFeesBPS New DAO fees in basis points (BPS) - 10000 = 100%\\n     */\\n    function updateDaoFees(uint256 newFeesBPS) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        if (newFeesBPS + $.senderTipsBPS > 10000) revert InvalidFeesBPS();\\n        $.daoFeesBPS = newFeesBPS;\\n    }\\n\\n    /**\\n     * @notice Allows admin to update sender tips\\n     * @param newTipsBPS New sender tips in basis points (BPS) - 10000 = 100%\\n     */\\n    function updateSenderTips(uint256 newTipsBPS) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        if ($.daoFeesBPS + newTipsBPS > 10000) revert InvalidTipsBPS();\\n        $.senderTipsBPS = newTipsBPS;\\n    }\\n\\n    /**\\n     * @notice Get current fee configuration\\n     * @return daoFees Current DAO fees in BPS\\n     * @return senderTips Current sender tips in BPS\\n     */\\n    function getFeeConfiguration() \\n        external \\n        view \\n        returns (uint256 daoFees, uint256 senderTips) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        return ($.daoFeesBPS, $.senderTipsBPS);\\n    }\\n\\n    /**\\n     * @notice Get DAO fee reduction configuration\\n     * @return token The DAO fee reduction token address\\n     * @return minimumAmount The minimum amount required for fee reduction\\n     * @return reductionPercentage The reduction percentage in BPS\\n     * @return treasuryAddress The DAO treasury address\\n     */\\n    function getDaoFeeReductionConfiguration() \\n        external \\n        view \\n        returns (\\n            address token, \\n            uint256 minimumAmount, \\n            uint256 reductionPercentage,\\n            address treasuryAddress\\n        ) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        return (\\n            $.daoFeeReductionToken, \\n            $.daoFeeReductionMinimumAmount, \\n            $.daoFeeReductionBPS, \\n            $.daoTreasuryAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows admin to update DAO fee reduction token\\n     * @param newToken The new DAO fee reduction token address\\n     */\\n    function updateDaoFeeReductionToken(address newToken) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n        validTokenAddress(newToken)\\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.daoFeeReductionToken = newToken;\\n    }\\n\\n    /**\\n     * @notice Allows admin to update DAO fee reduction minimum amount\\n     * @param newMinimumAmount The new minimum amount required for fee reduction\\n     */\\n    function updateDaoFeeReductionMinimumAmount(uint256 newMinimumAmount) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.daoFeeReductionMinimumAmount = newMinimumAmount;\\n    }\\n\\n    /**\\n     * @notice Allows admin to update DAO fee reduction percentage\\n     * @param newPercentage The new reduction percentage in BPS\\n     */\\n    function updateDaoFeeReductionPercentage(uint256 newPercentage) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.daoFeeReductionBPS = newPercentage;\\n    }\\n\\n    /**\\n     * @notice Allows admin to update DAO treasury address\\n     * @param newAddress The new DAO treasury address\\n     */\\n    function updateDaoTreasuryAddress(address newAddress) \\n        external \\n        onlyRole(ADMIN_ROLE) \\n    {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        $.daoTreasuryAddress = newAddress;\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer fees to respective addresses\\n     * @param token The token address\\n     * @param daoFees The DAO fees amount\\n     * @param senderTips The sender tips amount\\n     */\\n    function _transferFees(address token, uint256 daoFees, uint256 senderTips) internal {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        if (daoFees > 0 && $.daoTreasuryAddress != address(0)) {\\n            require(\\n                IERC20(token).transfer($.daoTreasuryAddress, daoFees), \\n                \\\"Transfer to DAO failed\\\"\\n            );\\n        }\\n        \\n        if (senderTips > 0) {\\n            require(IERC20(token).transfer(msg.sender, senderTips), \\\"Transfer to sender failed\\\");\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Returns an array of active token addresses\\n     * @dev Gas-optimized function that filters out inactive tokens using assembly for resizing\\n     * @return activeTokens Array of currently active token addresses\\n     */\\n    function getActiveTokens() external view returns (address[] memory activeTokens) {\\n        Rent2RepayStorage storage $ = _getR2rStorage();\\n        uint256 len = $.tokenList.length;\\n        /// @dev Allocate array with maximum size directly\\n        activeTokens = new address[](len);\\n\\n        uint256 count;\\n        for (uint256 i; i < len; ) {\\n            address t = $.tokenList[i];\\n            if ($.tokenConfig[t].active) {\\n                activeTokens[count] = t;\\n                unchecked { ++count; }\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        // Shrink array by writing count as new length using assembly\\n        assembly {\\n            mstore(activeTokens, count) \\n        }\\n    }\\n\\n    /**\\n     * @notice Authorizes contract upgrades - only ADMIN_ROLE can upgrade\\n     * @dev Required by UUPSUpgradeable. This ensures only admins can upgrade the contract\\n     * @param newImplementation Address of the new implementation contract\\n     */\\n    function _authorizeUpgrade(address newImplementation) \\n        internal \\n        override \\n        onlyRole(ADMIN_ROLE) \\n    {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     * @return Version string\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n        // Public getters for storage variables - optimized for gas\\n    function rmm() external view returns (IRMM) {\\n        return _getR2rStorage().rmm;\\n    }\\n\\n    function allowedMaxAmounts(address user, address token) external view returns (uint256) {\\n        return _getR2rStorage().allowedMaxAmounts[user][token];\\n    }\\n\\n    function lastRepayTimestamps(address user) external view returns (uint256) {\\n        return _getR2rStorage().lastRepayTimestamps[user];\\n    }\\n\\n    function periodicity(address user, address token) external view returns (uint256) {\\n        return _getR2rStorage().periodicity[user][token];\\n    }\\n\\n    function tokenConfig(address token) external view returns (TokenConfig memory) {\\n        return _getR2rStorage().tokenConfig[token];\\n    }\\n\\n    function tokenList(uint256 index) external view returns (address) {\\n        return _getR2rStorage().tokenList[index];\\n    }\\n\\n    function daoFeesBPS() external view returns (uint256) {\\n        return _getR2rStorage().daoFeesBPS;\\n    }\\n\\n    function senderTipsBPS() external view returns (uint256) {\\n        return _getR2rStorage().senderTipsBPS;\\n    }\\n\\n    function daoFeeReductionToken() external view returns (address) {\\n        return _getR2rStorage().daoFeeReductionToken;\\n    }\\n\\n    function daoFeeReductionMinimumAmount() external view returns (uint256) {\\n        return _getR2rStorage().daoFeeReductionMinimumAmount;\\n    }\\n\\n    function daoFeeReductionBPS() external view returns (uint256) {\\n        return _getR2rStorage().daoFeeReductionBPS;\\n    }\\n\\n    function daoTreasuryAddress() external view returns (address) {\\n        return _getR2rStorage().daoTreasuryAddress;\\n    }\\n} \",\"versionPragma\":\"^0.8.24\"},\"contracts/interfaces/IRMM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IRMM\\n * @notice Interface for RMM repayment functionality\\n * @dev Based on the RMM contract functionality for debt repayment\\n */\\ninterface IRMM {\\n    /**\\n     * @notice Repays debt on behalf of a borrower\\n     * @param asset The address of the asset being repaid\\n     * @param amount The amount to repay (use type(uint256).max for full repayment)\\n     * @param interestRateMode The interest rate mode: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the borrower whose debt is being repaid\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws supply tokens on behalf of a user\\n     * @param asset The address of the asset being withdrawn\\n     * @param amount The amount to withdraw\\n     * @param to The address to send the withdrawn tokens to\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n} \",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    function __Pausable_init() internal onlyInitializing {\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"}}}","address":"0xD3b291e9c0EFa72142e109946fa8B44399Afa9a8","bytecode":"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516138ca62000104600039600081816125610152818161258a01526126c401526138ca6000f3fe6080604052600436106102e45760003560e01c80638a29e2de11610190578063c382c90d116100dc578063e22c4ddf11610095578063ecfe66991161006f578063ecfe6699146108f8578063f5b541a614610918578063fe136c4e1461093a578063fe9fbb801461098c57600080fd5b8063e22c4ddf146108ae578063e3aab35f146108ce578063e75ee3fa146108e357600080fd5b8063c382c90d146107d5578063cd4ab756146107f5578063ce148e3d1461080a578063d51ec2641461082a578063d547741f1461084a578063db2065a61461086a57600080fd5b8063a900b82811610149578063ad3cb1cc11610123578063ad3cb1cc14610726578063ad5cb2e114610757578063b3b36bb314610781578063b97371f4146107b557600080fd5b8063a900b828146106c3578063abb2b0ae146106d8578063abefb76f146106f857600080fd5b80638a29e2de1461060157806391d148541461062157806398575188146106415780639ead722214610661578063a217fddf14610699578063a8a61b85146106ae57600080fd5b80633f1732eb1161024f5780635bf134b61161020857806371c90190116101e257806371c9019014610595578063748b4ade146105b557806375b238fc146105ca5780638456cb59146105ec57600080fd5b80635bf134b61461052e5780635c975abb1461054e5780635f5817e31461057357600080fd5b80633f1732eb146104855780633f4ba83a1461049a5780633fa76e3e146104af5780634f1ef286146104cf57806352d1902d146104e257806354fd4d50146104f757600080fd5b8063248a9ca3116102a1578063248a9ca3146103c55780632ee81f78146103e55780632f2ff15d1461040557806336568abe1461042557806337756e3c146104455780633adc25971461046557600080fd5b806301ffc9a7146102e957806311b564f71461031e57806312e5ef961461034c57806316037cb41461036357806320df4359146103835780632443ea8b146103a5575b600080fd5b3480156102f557600080fd5b50610309610304366004613200565b6109ac565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b5061033e610339366004613246565b6109e3565b604051908152602001610315565b34801561035857600080fd5b50610361610a1d565b005b34801561036f57600080fd5b5061036161037e366004613279565b610a50565b34801561038f57600080fd5b5061033e6000805160206137b583398151915281565b3480156103b157600080fd5b506103616103c03660046132e0565b610ac1565b3480156103d157600080fd5b5061033e6103e0366004613334565b610c47565b3480156103f157600080fd5b50610361610400366004613246565b610c69565b34801561041157600080fd5b5061036161042036600461334d565b610c90565b34801561043157600080fd5b5061036161044036600461334d565b610cb2565b34801561045157600080fd5b50610361610460366004613246565b610ce5565b34801561047157600080fd5b50610361610480366004613279565b610da3565b34801561049157600080fd5b5061033e610e09565b3480156104a657600080fd5b50610361610e1c565b3480156104bb57600080fd5b506103616104ca366004613370565b610e3c565b6103616104dd366004613404565b61119d565b3480156104ee57600080fd5b5061033e6111bc565b34801561050357600080fd5b506040805180820190915260058152640312e302e360dc1b60208201525b60405161031591906134ea565b34801561053a57600080fd5b5061033e610549366004613246565b6111d9565b34801561055a57600080fd5b506000805160206138358339815191525460ff16610309565b34801561057f57600080fd5b50610588611213565b6040516103159190613562565b3480156105a157600080fd5b506103616105b0366004613334565b611319565b3480156105c157600080fd5b5061033e611379565b3480156105d657600080fd5b5061033e60008051602061387583398151915281565b3480156105f857600080fd5b5061036161138c565b34801561060d57600080fd5b5061036161061c366004613575565b6113ac565b34801561062d57600080fd5b5061030961063c36600461334d565b61156c565b34801561064d57600080fd5b5061036161065c366004613279565b6115a4565b34801561066d57600080fd5b5061068161067c366004613334565b611625565b6040516001600160a01b039091168152602001610315565b3480156106a557600080fd5b5061033e600081565b3480156106ba57600080fd5b5061068161165e565b3480156106cf57600080fd5b5061068161167a565b3480156106e457600080fd5b506103616106f3366004613334565b611693565b34801561070457600080fd5b50610718610713366004613279565b6116c0565b60405161031592919061360c565b34801561073257600080fd5b50610521604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561076357600080fd5b5061076c611965565b60408051928352602083019190915201610315565b34801561078d57600080fd5b50610796611987565b6040805193151584529115156020840152151590820152606001610315565b3480156107c157600080fd5b506103616107d0366004613279565b6119d0565b3480156107e157600080fd5b506103616107f0366004613334565b611a18565b34801561080157600080fd5b5061033e611a78565b34801561081657600080fd5b50610361610825366004613663565b611a8b565b34801561083657600080fd5b50610361610845366004613696565b611b16565b34801561085657600080fd5b5061036161086536600461334d565b611c85565b34801561087657600080fd5b5061087f611ca1565b604080516001600160a01b03958616815260208101949094528301919091529091166060820152608001610315565b3480156108ba57600080fd5b5061033e6108c9366004613279565b611ce1565b3480156108da57600080fd5b50610681611d0d565b3480156108ef57600080fd5b5061033e611d29565b34801561090457600080fd5b50610361610913366004613334565b611d3c565b34801561092457600080fd5b5061033e6000805160206137f583398151915281565b34801561094657600080fd5b5061095a610955366004613279565b611d69565b6040805182516001600160a01b0390811682526020808501519091169082015291810151151590820152606001610315565b34801561099857600080fd5b506103096109a7366004613279565b611de2565b60006001600160e01b03198216637965db0b60e01b14806109dd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109ed611e10565b6001600160a01b039384166000908152600291909101602090815260408083209490951682529290925250205490565b33610a2781611de2565b610a4457604051635820429760e11b815260040160405180910390fd5b610a4d33611e33565b50565b600080516020613875833981519152610a6881611f5a565b816001600160a01b038116610a9057604051630f58058360e11b815260040160405180910390fd5b6000610a9a611e10565b60090180546001600160a01b0319166001600160a01b039590951694909417909355505050565b610ac9611f64565b806001600160a01b038116610af157604051630f58058360e11b815260040160405180910390fd5b81610afa611e10565b6001600160a01b03821660009081526005919091016020526040902060010154600160a01b900460ff16610b41576040516364822e9d60e11b815260040160405180910390fd5b610b49611f97565b600080808080805b89811015610c04578a8a82818110610b6b57610b6b6136d2565b9050602002016020810190610b809190613279565b91506001600160a01b038216610bd45760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064015b60405180910390fd5b610bde828a611fcf565b509094509250610bee84876136fe565b9550610bfa83866136fe565b9450600101610b51565b506000851180610c145750600084115b15610c2457610c24888686612038565b5050505050610c40600160008051602061385583398151915255565b5050505050565b6000908152600080516020613815833981519152602052604090206001015490565b600080516020613875833981519152610c8181611f5a565b610c8b83836121fa565b505050565b610c9982610c47565b610ca281611f5a565b610cac83836123d5565b50505050565b6001600160a01b0381163314610cdb5760405163334bd91960e11b815260040160405180910390fd5b610c8b828261247a565b610ced611f64565b806001600160a01b038116610d1557604051630f58058360e11b815260040160405180910390fd5b81610d1e611e10565b6001600160a01b03821660009081526005919091016020526040902060010154600160a01b900460ff16610d65576040516364822e9d60e11b815260040160405180910390fd5b610d6d611f97565b600080610d7a8686611fcf565b5091509150610d8a858383612038565b5050610cac600160008051602061385583398151915255565b600080516020613875833981519152610dbb81611f5a565b6000610dc5611e10565b6001600160a01b039384166000908152600590910160205260408082206001908101805460ff60a01b19808216909255909616835291200180549093169092555050565b6000610e13611e10565b600a0154905090565b600080516020613875833981519152610e3481611f5a565b610a4d6124f6565b610e44611f64565b6000610e4e611e10565b9050858015801590610e5f57508085145b610ea35760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206172726179206c656e6774687360581b6044820152606401610bcb565b600682015460005b81811015610f5a57336000908152600285016020526040812060068601805483919085908110610edd57610edd6136d2565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181209390935533835260048701909152812060068601805483919085908110610f2d57610f2d6136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600101610eab565b5060005b828110156111435760008a8a83818110610f7a57610f7a6136d2565b9050602002016020810190610f8f9190613279565b6001600160a01b031614158015610ff657508360050160008b8b84818110610fb957610fb96136d2565b9050602002016020810190610fce9190613279565b6001600160a01b03168152602081019190915260400160002060010154600160a01b900460ff165b801561101a57506000888883818110611011576110116136d2565b90506020020135115b6110665760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420746f6b656e206f7220616d6f756e740000000000000000006044820152606401610bcb565b878782818110611078576110786136d2565b3360009081526002880160209081526040822092029390930135929091508c8c858181106110a8576110a86136d2565b90506020020160208101906110bd9190613279565b6001600160a01b0316815260208101919091526040016000205585156110e357856110e8565b62093a805b3360009081526004860160205260408120908c8c8581811061110c5761110c6136d2565b90506020020160208101906111219190613279565b6001600160a01b03168152602081019190915260400160002055600101610f5e565b5060008411611153576001611155565b835b33600081815260038601602052604080822093909355915190917ff4f78d5c433fe4401dcb22611fda4342741f3065242be004246b72d27cf462c491a2505050505050505050565b6111a5612556565b6111ae826125e4565b6111b882826125fc565b5050565b60006111c66126b9565b506000805160206137d583398151915290565b60006111e3611e10565b6001600160a01b039384166000908152600491909101602090815260408083209490951682529290925250205490565b6060600061121f611e10565b60068101549091508067ffffffffffffffff811115611240576112406133ee565b604051908082528060200260200182016040528015611269578160200160208202803683370190505b5092506000805b8281101561130f57600084600601828154811061128f5761128f6136d2565b60009182526020808320909101546001600160a01b03168083526005880190915260409091206001015490915060ff600160a01b909104161561130657808684815181106112df576112df6136d2565b60200260200101906001600160a01b031690816001600160a01b0316815250508260010192505b50600101611270565b5080845250505090565b60008051602061387583398151915261133181611f5a565b600061133b611e10565b905061271083826007015461135091906136fe565b111561136f5760405163a5e9992960e01b815260040160405180910390fd5b6008019190915550565b6000611383611e10565b60070154905090565b6000805160206137b58339815191526113a481611f5a565b610a4d612702565b60006113b661274b565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156113de5750825b905060008267ffffffffffffffff1660011480156113fb5750303b155b905081158015611409575080155b156114275760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561145157845460ff60401b1916600160401b1785555b611459612774565b611461612774565b61146961277c565b61147460008e6123d5565b5061148d6000805160206138758339815191528e6123d5565b506114a66000805160206137b58339815191528d6123d5565b506114bf6000805160206137f58339815191528c6123d5565b5060006114ca611e10565b80546001600160a01b0319166001600160a01b038d161781556032600782015560196008820155611388600b82015560026001820155905061150c8a8a6121fa565b61151688886121fa565b50831561155d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050505050565b6000918252600080516020613815833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206137f58339815191526115bc81611f5a565b816115c681611de2565b6115e357604051635820429760e11b815260040160405180910390fd5b6115ec83611e33565b6040516001600160a01b038416907fb0af8c81b1348775f575d15b089945448faaedf4b8c79a3c6ab4c638aa1beeea90600090a2505050565b600061162f611e10565b6006018281548110611643576116436136d2565b6000918252602090912001546001600160a01b031692915050565b6000611668611e10565b600901546001600160a01b0316919050565b6000611684611e10565b546001600160a01b0316919050565b6000805160206138758339815191526116ab81611f5a565b60006116b5611e10565b600a01929092555050565b60608060006116cd611e10565b6001600160a01b03851660009081526003820160205260408120549192500361171057505060408051600080825260208201908152818301909252939092509050565b60068101548067ffffffffffffffff81111561172e5761172e6133ee565b604051908082528060200260200182016040528015611757578160200160208202803683370190505b5093508067ffffffffffffffff811115611773576117736133ee565b60405190808252806020026020018201604052801561179c578160200160208202803683370190505b5092506000805b82811015611956578360050160008560060183815481106117c6576117c66136d2565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a01b90910416801561185a57506001600160a01b0387166000908152600285016020526040812060068601805483919085908110611833576118336136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b1561194e57836006018181548110611874576118746136d2565b9060005260206000200160009054906101000a90046001600160a01b03168683815181106118a4576118a46136d2565b60200260200101906001600160a01b031690816001600160a01b031681525050836002016000886001600160a01b03166001600160a01b031681526020019081526020016000206000856006018381548110611902576119026136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902054855186908490811061193b5761193b6136d2565b6020026020010181815250508160010191505b6001016117a3565b50808552808452505050915091565b6000806000611972611e10565b90508060070154816008015492509250509091565b60008080611995813361156c565b6119ad6000805160206137f58339815191523361156c565b6119c56000805160206137b58339815191523361156c565b925092509250909192565b6000805160206138758339815191526119e881611f5a565b60006119f2611e10565b600c0180546001600160a01b0319166001600160a01b0394909416939093179092555050565b600080516020613875833981519152611a3081611f5a565b6000611a3a611e10565b9050612710816008015484611a4f91906136fe565b1115611a6e576040516364acf7d960e11b815260040160405180910390fd5b6007019190915550565b6000611a82611e10565b60080154905090565b600080516020613875833981519152611aa381611f5a565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820185905285169063a9059cbb906044016020604051808303816000875af1158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190613711565b600080516020613875833981519152611b2e81611f5a565b6001600160a01b038316611b845760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207370656e64657220616464726573730000000000000000006044820152606401610bcb565b60008211611bd45760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610bcb565b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c479190613711565b610cac5760405162461bcd60e51b815260206004820152600f60248201526e105c1c1c9bdd985b0819985a5b1959608a1b6044820152606401610bcb565b611c8e82610c47565b611c9781611f5a565b610cac838361247a565b6000806000806000611cb1611e10565b6009810154600a820154600b830154600c909301546001600160a01b039283169991985092965091169350915050565b6000611ceb611e10565b6001600160a01b03909216600090815260039290920160205250604090205490565b6000611d17611e10565b600c01546001600160a01b0316919050565b6000611d33611e10565b600b0154905090565b600080516020613875833981519152611d5481611f5a565b6000611d5e611e10565b600b01929092555050565b6040805160608101825260008082526020820181905291810191909152611d8e611e10565b6001600160a01b0392831660009081526005919091016020908152604091829020825160608101845281548616815260019091015494851691810191909152600160a01b90930460ff161515908301525090565b6000611dec611e10565b6001600160a01b039092166000908152600392909201602052506040902054151590565b7e052c63247e1f47d19d5ce046630c49f7c67dcaecfb71ba98eedaab2ebca6e090565b6000611e3d611e10565b6001600160a01b0383166000908152600382016020526040812081905560068201549192505b81811015611f20576001600160a01b0384166000908152600284016020526040812060068501805483919085908110611e9e57611e9e6136d2565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182209490945591871682526004860190925290812060068501805483919085908110611ef357611ef36136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600101611e63565b506040516001600160a01b038416907fb0af8c81b1348775f575d15b089945448faaedf4b8c79a3c6ab4c638aa1beeea90600090a2505050565b610a4d813361278c565b6000805160206138358339815191525460ff1615611f955760405163d93c066560e01b815260040160405180910390fd5b565b600080516020613855833981519152805460011901611fc957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600080600080611fdd611e10565b9050611fe986866127c5565b600080611ff68888612957565b909650909250905061200a88888484612aec565b6001600160a01b03909916600090815260039094016020526040909320429055509596929550935090915050565b6000612042611e10565b90506000831180156120605750600c8101546001600160a01b031615155b1561212357600c81015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529085169063a9059cbb906044016020604051808303816000875af11580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de9190613711565b6121235760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c881d1bc8111053c819985a5b195960521b6044820152606401610bcb565b8115610cac5760405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219a9190613711565b610cac5760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2073656e646572206661696c6564000000000000006044820152606401610bcb565b600160008051602061385583398151915255565b6000612204611e10565b905060006040518060600160405280856001600160a01b03168152602001846001600160a01b0316815260200160011515815250905080826005016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555090505080826005016000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555090505081600601849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60006000805160206138158339815191526123f0848461156c565b612470576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556124263390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506109dd565b60009150506109dd565b6000600080516020613815833981519152612495848461156c565b15612470576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506109dd565b6124fe612dbb565b600080516020613835833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806125c657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166125ba612deb565b6001600160a01b031614155b15611f955760405163703e46dd60e11b815260040160405180910390fd5b6000805160206138758339815191526111b881611f5a565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612656575060408051601f3d908101601f1916820190925261265391810190613733565b60015b61267e57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610bcb565b6000805160206137d583398151915281146126af57604051632a87526960e21b815260048101829052602401610bcb565b610c8b8383612e01565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f955760405163703e46dd60e11b815260040160405180910390fd5b61270a611f64565b600080516020613835833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612538565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006109dd565b611f95612e57565b612784612e57565b611f95612e7c565b612796828261156c565b6111b85760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610bcb565b60006127cf611e10565b6001600160a01b0384166000908152600382016020526040812054919250036128305760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd08185d5d1a1bdc9a5e9959606a1b6044820152606401610bcb565b6001600160a01b0380841660009081526002830160209081526040808320938616835292905220546128a45760405162461bcd60e51b815260206004820152601d60248201527f55736572206e6f7420636f6e6669677572656420666f7220746f6b656e0000006044820152606401610bcb565b6001600160a01b03808416600090815260048301602090815260408083209386168352929052205461290e5760405162461bcd60e51b815260206004820152601360248201527214195c9a5bd91a58da5d1e481b9bdd081cd95d606a1b6044820152606401610bcb565b6129188383612e84565b610c8b5760405162461bcd60e51b815260206004820152601060248201526f15d85a5d081b995e1d081c195c9a5bd960821b6044820152606401610bcb565b600080600080612965611e10565b6001600160a01b0387811660008181526002840160209081526040808320948b16808452949091528082205490516370a0823160e01b8152600481019390935293945091906370a0823190602401602060405180830381865afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f49190613733565b90506000828210612a055782612a07565b815b9050612a13818a612ede565b6040516323b872dd60e01b81526001600160a01b038d8116600483015230602483015260448201869052939a509198509650908916906323b872dd906064016020604051808303816000875af1158015612a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a959190613711565b612ae15760405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657246726f6d20746f20523252206661696c65640000000000006044820152606401610bcb565b505050509250925092565b6000806000612af9611e10565b6001600160a01b038088166000818152600584016020526040902060010154929350911603612c035780546001600160a01b03878116600090815260058401602052604090819020549051631a4ca37b60e21b8152908216600482015260248101879052306044820152869291909116906369328dec906064016020604051808303816000875af1158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb69190613733565b14612c035760405162461bcd60e51b815260206004820152601960248201527f57697468647261776e20616d6f756e74206d69736d61746368000000000000006044820152606401610bcb565b80546001600160a01b03878116600090815260058401602052604090819020546001850154915163573ade8160e01b81529083166004820152602481018890526044810191909152898216606482015291169063573ade81906084016020604051808303816000875af1158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca29190613733565b92506000612cb0848661374c565b90508015612d8c576001600160a01b0387811660009081526005840160205260409081902054905163a9059cbb60e01b81528a831660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015612d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d409190613711565b612d8c5760405162461bcd60e51b815260206004820152601760248201527f7472616e7366657220746f2075736572206661696c65640000000000000000006044820152606401610bcb565b8592508015612db057808611612da3576000612dad565b612dad818761374c565b92505b505094509492505050565b6000805160206138358339815191525460ff16611f9557604051638dfc202b60e01b815260040160405180910390fd5b60006000805160206137d5833981519152611684565b612e0a82613064565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612e4f57610c8b82826130c9565b6111b861313f565b612e5f61315e565b611f9557604051631afcd79f60e31b815260040160405180910390fd5b6121e6612e57565b600080612e8f611e10565b6001600160a01b03808616600081815260048401602090815260408083209489168352938152838220549282526003850190529190912054919250612ed3916136fe565b421015949350505050565b600080600080612eec611e10565b9050612710816007015487612f01919061375f565b612f0b9190613776565b9350612710816008015487612f20919061375f565b612f2a9190613776565b60098201549093506001600160a01b031615801590612f4d5750600081600a0154115b156130015760098101546040516370a0823160e01b81526001600160a01b03878116600483015260009216906370a0823190602401602060405180830381865afa158015612f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc39190613733565b905081600a01548110612fff57600061271083600b015487612fe5919061375f565b612fef9190613776565b9050612ffb818761374c565b9550505b505b600061300d84866136fe565b90508681111561304f5760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401610bcb565b613059818861374c565b925050509250925092565b806001600160a01b03163b60000361309a57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610bcb565b6000805160206137d583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516130e69190613798565b600060405180830381855af49150503d8060008114613121576040519150601f19603f3d011682016040523d82523d6000602084013e613126565b606091505b5091509150613136858383613178565b95945050505050565b3415611f955760405163b398979f60e01b815260040160405180910390fd5b600061316861274b565b54600160401b900460ff16919050565b60608261318d57613188826131d7565b6131d0565b81511580156131a457506001600160a01b0384163b155b156131cd57604051639996b31560e01b81526001600160a01b0385166004820152602401610bcb565b50805b9392505050565b8051156131e75780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b60006020828403121561321257600080fd5b81356001600160e01b0319811681146131d057600080fd5b80356001600160a01b038116811461324157600080fd5b919050565b6000806040838503121561325957600080fd5b6132628361322a565b91506132706020840161322a565b90509250929050565b60006020828403121561328b57600080fd5b6131d08261322a565b60008083601f8401126132a657600080fd5b50813567ffffffffffffffff8111156132be57600080fd5b6020830191508360208260051b85010111156132d957600080fd5b9250929050565b6000806000604084860312156132f557600080fd5b833567ffffffffffffffff81111561330c57600080fd5b61331886828701613294565b909450925061332b90506020850161322a565b90509250925092565b60006020828403121561334657600080fd5b5035919050565b6000806040838503121561336057600080fd5b823591506132706020840161322a565b6000806000806000806080878903121561338957600080fd5b863567ffffffffffffffff808211156133a157600080fd5b6133ad8a838b01613294565b909850965060208901359150808211156133c657600080fd5b506133d389828a01613294565b979a9699509760408101359660609091013595509350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561341757600080fd5b6134208361322a565b9150602083013567ffffffffffffffff8082111561343d57600080fd5b818501915085601f83011261345157600080fd5b813581811115613463576134636133ee565b604051601f8201601f19908116603f0116810190838211818310171561348b5761348b6133ee565b816040528281528860208487010111156134a457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156134e15781810151838201526020016134c9565b50506000910152565b60208152600082518060208401526135098160408501602087016134c6565b601f01601f19169190910160400192915050565b60008151808452602080850194506020840160005b838110156135575781516001600160a01b031687529582019590820190600101613532565b509495945050505050565b6020815260006131d0602083018461351d565b600080600080600080600080610100898b03121561359257600080fd5b61359b8961322a565b97506135a960208a0161322a565b96506135b760408a0161322a565b95506135c560608a0161322a565b94506135d360808a0161322a565b93506135e160a08a0161322a565b92506135ef60c08a0161322a565b91506135fd60e08a0161322a565b90509295985092959890939650565b60408152600061361f604083018561351d565b82810360208481019190915284518083528582019282019060005b818110156136565784518352938301939183019160010161363a565b5090979650505050505050565b60008060006060848603121561367857600080fd5b6136818461322a565b92506020840135915061332b6040850161322a565b6000806000606084860312156136ab57600080fd5b6136b48461322a565b92506136c26020850161322a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156109dd576109dd6136e8565b60006020828403121561372357600080fd5b815180151581146131d057600080fd5b60006020828403121561374557600080fd5b5051919050565b818103818111156109dd576109dd6136e8565b80820281158282048414176109dd576109dd6136e8565b60008261379357634e487b7160e01b600052601260045260246000fd5b500490565b600082516137aa8184602087016134c6565b919091019291505056febf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92902dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b190fe26b24e4eb5a11bbcf2048b6c96a3caf78dca69b6d471a8eff53eed0f9264736f6c63430008180033","deployedBytecode":"0x6080604052600436106102e45760003560e01c80638a29e2de11610190578063c382c90d116100dc578063e22c4ddf11610095578063ecfe66991161006f578063ecfe6699146108f8578063f5b541a614610918578063fe136c4e1461093a578063fe9fbb801461098c57600080fd5b8063e22c4ddf146108ae578063e3aab35f146108ce578063e75ee3fa146108e357600080fd5b8063c382c90d146107d5578063cd4ab756146107f5578063ce148e3d1461080a578063d51ec2641461082a578063d547741f1461084a578063db2065a61461086a57600080fd5b8063a900b82811610149578063ad3cb1cc11610123578063ad3cb1cc14610726578063ad5cb2e114610757578063b3b36bb314610781578063b97371f4146107b557600080fd5b8063a900b828146106c3578063abb2b0ae146106d8578063abefb76f146106f857600080fd5b80638a29e2de1461060157806391d148541461062157806398575188146106415780639ead722214610661578063a217fddf14610699578063a8a61b85146106ae57600080fd5b80633f1732eb1161024f5780635bf134b61161020857806371c90190116101e257806371c9019014610595578063748b4ade146105b557806375b238fc146105ca5780638456cb59146105ec57600080fd5b80635bf134b61461052e5780635c975abb1461054e5780635f5817e31461057357600080fd5b80633f1732eb146104855780633f4ba83a1461049a5780633fa76e3e146104af5780634f1ef286146104cf57806352d1902d146104e257806354fd4d50146104f757600080fd5b8063248a9ca3116102a1578063248a9ca3146103c55780632ee81f78146103e55780632f2ff15d1461040557806336568abe1461042557806337756e3c146104455780633adc25971461046557600080fd5b806301ffc9a7146102e957806311b564f71461031e57806312e5ef961461034c57806316037cb41461036357806320df4359146103835780632443ea8b146103a5575b600080fd5b3480156102f557600080fd5b50610309610304366004613200565b6109ac565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b5061033e610339366004613246565b6109e3565b604051908152602001610315565b34801561035857600080fd5b50610361610a1d565b005b34801561036f57600080fd5b5061036161037e366004613279565b610a50565b34801561038f57600080fd5b5061033e6000805160206137b583398151915281565b3480156103b157600080fd5b506103616103c03660046132e0565b610ac1565b3480156103d157600080fd5b5061033e6103e0366004613334565b610c47565b3480156103f157600080fd5b50610361610400366004613246565b610c69565b34801561041157600080fd5b5061036161042036600461334d565b610c90565b34801561043157600080fd5b5061036161044036600461334d565b610cb2565b34801561045157600080fd5b50610361610460366004613246565b610ce5565b34801561047157600080fd5b50610361610480366004613279565b610da3565b34801561049157600080fd5b5061033e610e09565b3480156104a657600080fd5b50610361610e1c565b3480156104bb57600080fd5b506103616104ca366004613370565b610e3c565b6103616104dd366004613404565b61119d565b3480156104ee57600080fd5b5061033e6111bc565b34801561050357600080fd5b506040805180820190915260058152640312e302e360dc1b60208201525b60405161031591906134ea565b34801561053a57600080fd5b5061033e610549366004613246565b6111d9565b34801561055a57600080fd5b506000805160206138358339815191525460ff16610309565b34801561057f57600080fd5b50610588611213565b6040516103159190613562565b3480156105a157600080fd5b506103616105b0366004613334565b611319565b3480156105c157600080fd5b5061033e611379565b3480156105d657600080fd5b5061033e60008051602061387583398151915281565b3480156105f857600080fd5b5061036161138c565b34801561060d57600080fd5b5061036161061c366004613575565b6113ac565b34801561062d57600080fd5b5061030961063c36600461334d565b61156c565b34801561064d57600080fd5b5061036161065c366004613279565b6115a4565b34801561066d57600080fd5b5061068161067c366004613334565b611625565b6040516001600160a01b039091168152602001610315565b3480156106a557600080fd5b5061033e600081565b3480156106ba57600080fd5b5061068161165e565b3480156106cf57600080fd5b5061068161167a565b3480156106e457600080fd5b506103616106f3366004613334565b611693565b34801561070457600080fd5b50610718610713366004613279565b6116c0565b60405161031592919061360c565b34801561073257600080fd5b50610521604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561076357600080fd5b5061076c611965565b60408051928352602083019190915201610315565b34801561078d57600080fd5b50610796611987565b6040805193151584529115156020840152151590820152606001610315565b3480156107c157600080fd5b506103616107d0366004613279565b6119d0565b3480156107e157600080fd5b506103616107f0366004613334565b611a18565b34801561080157600080fd5b5061033e611a78565b34801561081657600080fd5b50610361610825366004613663565b611a8b565b34801561083657600080fd5b50610361610845366004613696565b611b16565b34801561085657600080fd5b5061036161086536600461334d565b611c85565b34801561087657600080fd5b5061087f611ca1565b604080516001600160a01b03958616815260208101949094528301919091529091166060820152608001610315565b3480156108ba57600080fd5b5061033e6108c9366004613279565b611ce1565b3480156108da57600080fd5b50610681611d0d565b3480156108ef57600080fd5b5061033e611d29565b34801561090457600080fd5b50610361610913366004613334565b611d3c565b34801561092457600080fd5b5061033e6000805160206137f583398151915281565b34801561094657600080fd5b5061095a610955366004613279565b611d69565b6040805182516001600160a01b0390811682526020808501519091169082015291810151151590820152606001610315565b34801561099857600080fd5b506103096109a7366004613279565b611de2565b60006001600160e01b03198216637965db0b60e01b14806109dd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006109ed611e10565b6001600160a01b039384166000908152600291909101602090815260408083209490951682529290925250205490565b33610a2781611de2565b610a4457604051635820429760e11b815260040160405180910390fd5b610a4d33611e33565b50565b600080516020613875833981519152610a6881611f5a565b816001600160a01b038116610a9057604051630f58058360e11b815260040160405180910390fd5b6000610a9a611e10565b60090180546001600160a01b0319166001600160a01b039590951694909417909355505050565b610ac9611f64565b806001600160a01b038116610af157604051630f58058360e11b815260040160405180910390fd5b81610afa611e10565b6001600160a01b03821660009081526005919091016020526040902060010154600160a01b900460ff16610b41576040516364822e9d60e11b815260040160405180910390fd5b610b49611f97565b600080808080805b89811015610c04578a8a82818110610b6b57610b6b6136d2565b9050602002016020810190610b809190613279565b91506001600160a01b038216610bd45760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064015b60405180910390fd5b610bde828a611fcf565b509094509250610bee84876136fe565b9550610bfa83866136fe565b9450600101610b51565b506000851180610c145750600084115b15610c2457610c24888686612038565b5050505050610c40600160008051602061385583398151915255565b5050505050565b6000908152600080516020613815833981519152602052604090206001015490565b600080516020613875833981519152610c8181611f5a565b610c8b83836121fa565b505050565b610c9982610c47565b610ca281611f5a565b610cac83836123d5565b50505050565b6001600160a01b0381163314610cdb5760405163334bd91960e11b815260040160405180910390fd5b610c8b828261247a565b610ced611f64565b806001600160a01b038116610d1557604051630f58058360e11b815260040160405180910390fd5b81610d1e611e10565b6001600160a01b03821660009081526005919091016020526040902060010154600160a01b900460ff16610d65576040516364822e9d60e11b815260040160405180910390fd5b610d6d611f97565b600080610d7a8686611fcf565b5091509150610d8a858383612038565b5050610cac600160008051602061385583398151915255565b600080516020613875833981519152610dbb81611f5a565b6000610dc5611e10565b6001600160a01b039384166000908152600590910160205260408082206001908101805460ff60a01b19808216909255909616835291200180549093169092555050565b6000610e13611e10565b600a0154905090565b600080516020613875833981519152610e3481611f5a565b610a4d6124f6565b610e44611f64565b6000610e4e611e10565b9050858015801590610e5f57508085145b610ea35760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206172726179206c656e6774687360581b6044820152606401610bcb565b600682015460005b81811015610f5a57336000908152600285016020526040812060068601805483919085908110610edd57610edd6136d2565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181209390935533835260048701909152812060068601805483919085908110610f2d57610f2d6136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600101610eab565b5060005b828110156111435760008a8a83818110610f7a57610f7a6136d2565b9050602002016020810190610f8f9190613279565b6001600160a01b031614158015610ff657508360050160008b8b84818110610fb957610fb96136d2565b9050602002016020810190610fce9190613279565b6001600160a01b03168152602081019190915260400160002060010154600160a01b900460ff165b801561101a57506000888883818110611011576110116136d2565b90506020020135115b6110665760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420746f6b656e206f7220616d6f756e740000000000000000006044820152606401610bcb565b878782818110611078576110786136d2565b3360009081526002880160209081526040822092029390930135929091508c8c858181106110a8576110a86136d2565b90506020020160208101906110bd9190613279565b6001600160a01b0316815260208101919091526040016000205585156110e357856110e8565b62093a805b3360009081526004860160205260408120908c8c8581811061110c5761110c6136d2565b90506020020160208101906111219190613279565b6001600160a01b03168152602081019190915260400160002055600101610f5e565b5060008411611153576001611155565b835b33600081815260038601602052604080822093909355915190917ff4f78d5c433fe4401dcb22611fda4342741f3065242be004246b72d27cf462c491a2505050505050505050565b6111a5612556565b6111ae826125e4565b6111b882826125fc565b5050565b60006111c66126b9565b506000805160206137d583398151915290565b60006111e3611e10565b6001600160a01b039384166000908152600491909101602090815260408083209490951682529290925250205490565b6060600061121f611e10565b60068101549091508067ffffffffffffffff811115611240576112406133ee565b604051908082528060200260200182016040528015611269578160200160208202803683370190505b5092506000805b8281101561130f57600084600601828154811061128f5761128f6136d2565b60009182526020808320909101546001600160a01b03168083526005880190915260409091206001015490915060ff600160a01b909104161561130657808684815181106112df576112df6136d2565b60200260200101906001600160a01b031690816001600160a01b0316815250508260010192505b50600101611270565b5080845250505090565b60008051602061387583398151915261133181611f5a565b600061133b611e10565b905061271083826007015461135091906136fe565b111561136f5760405163a5e9992960e01b815260040160405180910390fd5b6008019190915550565b6000611383611e10565b60070154905090565b6000805160206137b58339815191526113a481611f5a565b610a4d612702565b60006113b661274b565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156113de5750825b905060008267ffffffffffffffff1660011480156113fb5750303b155b905081158015611409575080155b156114275760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561145157845460ff60401b1916600160401b1785555b611459612774565b611461612774565b61146961277c565b61147460008e6123d5565b5061148d6000805160206138758339815191528e6123d5565b506114a66000805160206137b58339815191528d6123d5565b506114bf6000805160206137f58339815191528c6123d5565b5060006114ca611e10565b80546001600160a01b0319166001600160a01b038d161781556032600782015560196008820155611388600b82015560026001820155905061150c8a8a6121fa565b61151688886121fa565b50831561155d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050505050565b6000918252600080516020613815833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206137f58339815191526115bc81611f5a565b816115c681611de2565b6115e357604051635820429760e11b815260040160405180910390fd5b6115ec83611e33565b6040516001600160a01b038416907fb0af8c81b1348775f575d15b089945448faaedf4b8c79a3c6ab4c638aa1beeea90600090a2505050565b600061162f611e10565b6006018281548110611643576116436136d2565b6000918252602090912001546001600160a01b031692915050565b6000611668611e10565b600901546001600160a01b0316919050565b6000611684611e10565b546001600160a01b0316919050565b6000805160206138758339815191526116ab81611f5a565b60006116b5611e10565b600a01929092555050565b60608060006116cd611e10565b6001600160a01b03851660009081526003820160205260408120549192500361171057505060408051600080825260208201908152818301909252939092509050565b60068101548067ffffffffffffffff81111561172e5761172e6133ee565b604051908082528060200260200182016040528015611757578160200160208202803683370190505b5093508067ffffffffffffffff811115611773576117736133ee565b60405190808252806020026020018201604052801561179c578160200160208202803683370190505b5092506000805b82811015611956578360050160008560060183815481106117c6576117c66136d2565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015460ff600160a01b90910416801561185a57506001600160a01b0387166000908152600285016020526040812060068601805483919085908110611833576118336136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b1561194e57836006018181548110611874576118746136d2565b9060005260206000200160009054906101000a90046001600160a01b03168683815181106118a4576118a46136d2565b60200260200101906001600160a01b031690816001600160a01b031681525050836002016000886001600160a01b03166001600160a01b031681526020019081526020016000206000856006018381548110611902576119026136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902054855186908490811061193b5761193b6136d2565b6020026020010181815250508160010191505b6001016117a3565b50808552808452505050915091565b6000806000611972611e10565b90508060070154816008015492509250509091565b60008080611995813361156c565b6119ad6000805160206137f58339815191523361156c565b6119c56000805160206137b58339815191523361156c565b925092509250909192565b6000805160206138758339815191526119e881611f5a565b60006119f2611e10565b600c0180546001600160a01b0319166001600160a01b0394909416939093179092555050565b600080516020613875833981519152611a3081611f5a565b6000611a3a611e10565b9050612710816008015484611a4f91906136fe565b1115611a6e576040516364acf7d960e11b815260040160405180910390fd5b6007019190915550565b6000611a82611e10565b60080154905090565b600080516020613875833981519152611aa381611f5a565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820185905285169063a9059cbb906044016020604051808303816000875af1158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190613711565b600080516020613875833981519152611b2e81611f5a565b6001600160a01b038316611b845760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207370656e64657220616464726573730000000000000000006044820152606401610bcb565b60008211611bd45760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610bcb565b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c479190613711565b610cac5760405162461bcd60e51b815260206004820152600f60248201526e105c1c1c9bdd985b0819985a5b1959608a1b6044820152606401610bcb565b611c8e82610c47565b611c9781611f5a565b610cac838361247a565b6000806000806000611cb1611e10565b6009810154600a820154600b830154600c909301546001600160a01b039283169991985092965091169350915050565b6000611ceb611e10565b6001600160a01b03909216600090815260039290920160205250604090205490565b6000611d17611e10565b600c01546001600160a01b0316919050565b6000611d33611e10565b600b0154905090565b600080516020613875833981519152611d5481611f5a565b6000611d5e611e10565b600b01929092555050565b6040805160608101825260008082526020820181905291810191909152611d8e611e10565b6001600160a01b0392831660009081526005919091016020908152604091829020825160608101845281548616815260019091015494851691810191909152600160a01b90930460ff161515908301525090565b6000611dec611e10565b6001600160a01b039092166000908152600392909201602052506040902054151590565b7e052c63247e1f47d19d5ce046630c49f7c67dcaecfb71ba98eedaab2ebca6e090565b6000611e3d611e10565b6001600160a01b0383166000908152600382016020526040812081905560068201549192505b81811015611f20576001600160a01b0384166000908152600284016020526040812060068501805483919085908110611e9e57611e9e6136d2565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182209490945591871682526004860190925290812060068501805483919085908110611ef357611ef36136d2565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600101611e63565b506040516001600160a01b038416907fb0af8c81b1348775f575d15b089945448faaedf4b8c79a3c6ab4c638aa1beeea90600090a2505050565b610a4d813361278c565b6000805160206138358339815191525460ff1615611f955760405163d93c066560e01b815260040160405180910390fd5b565b600080516020613855833981519152805460011901611fc957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600080600080611fdd611e10565b9050611fe986866127c5565b600080611ff68888612957565b909650909250905061200a88888484612aec565b6001600160a01b03909916600090815260039094016020526040909320429055509596929550935090915050565b6000612042611e10565b90506000831180156120605750600c8101546001600160a01b031615155b1561212357600c81015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529085169063a9059cbb906044016020604051808303816000875af11580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de9190613711565b6121235760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd9995c881d1bc8111053c819985a5b195960521b6044820152606401610bcb565b8115610cac5760405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219a9190613711565b610cac5760405162461bcd60e51b815260206004820152601960248201527f5472616e7366657220746f2073656e646572206661696c6564000000000000006044820152606401610bcb565b600160008051602061385583398151915255565b6000612204611e10565b905060006040518060600160405280856001600160a01b03168152602001846001600160a01b0316815260200160011515815250905080826005016000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555090505080826005016000856001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555090505081600601849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60006000805160206138158339815191526123f0848461156c565b612470576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556124263390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506109dd565b60009150506109dd565b6000600080516020613815833981519152612495848461156c565b15612470576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506109dd565b6124fe612dbb565b600080516020613835833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806125c657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166125ba612deb565b6001600160a01b031614155b15611f955760405163703e46dd60e11b815260040160405180910390fd5b6000805160206138758339815191526111b881611f5a565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612656575060408051601f3d908101601f1916820190925261265391810190613733565b60015b61267e57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610bcb565b6000805160206137d583398151915281146126af57604051632a87526960e21b815260048101829052602401610bcb565b610c8b8383612e01565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f955760405163703e46dd60e11b815260040160405180910390fd5b61270a611f64565b600080516020613835833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612538565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006109dd565b611f95612e57565b612784612e57565b611f95612e7c565b612796828261156c565b6111b85760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610bcb565b60006127cf611e10565b6001600160a01b0384166000908152600382016020526040812054919250036128305760405162461bcd60e51b8152602060048201526013602482015272155cd95c881b9bdd08185d5d1a1bdc9a5e9959606a1b6044820152606401610bcb565b6001600160a01b0380841660009081526002830160209081526040808320938616835292905220546128a45760405162461bcd60e51b815260206004820152601d60248201527f55736572206e6f7420636f6e6669677572656420666f7220746f6b656e0000006044820152606401610bcb565b6001600160a01b03808416600090815260048301602090815260408083209386168352929052205461290e5760405162461bcd60e51b815260206004820152601360248201527214195c9a5bd91a58da5d1e481b9bdd081cd95d606a1b6044820152606401610bcb565b6129188383612e84565b610c8b5760405162461bcd60e51b815260206004820152601060248201526f15d85a5d081b995e1d081c195c9a5bd960821b6044820152606401610bcb565b600080600080612965611e10565b6001600160a01b0387811660008181526002840160209081526040808320948b16808452949091528082205490516370a0823160e01b8152600481019390935293945091906370a0823190602401602060405180830381865afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f49190613733565b90506000828210612a055782612a07565b815b9050612a13818a612ede565b6040516323b872dd60e01b81526001600160a01b038d8116600483015230602483015260448201869052939a509198509650908916906323b872dd906064016020604051808303816000875af1158015612a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a959190613711565b612ae15760405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657246726f6d20746f20523252206661696c65640000000000006044820152606401610bcb565b505050509250925092565b6000806000612af9611e10565b6001600160a01b038088166000818152600584016020526040902060010154929350911603612c035780546001600160a01b03878116600090815260058401602052604090819020549051631a4ca37b60e21b8152908216600482015260248101879052306044820152869291909116906369328dec906064016020604051808303816000875af1158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb69190613733565b14612c035760405162461bcd60e51b815260206004820152601960248201527f57697468647261776e20616d6f756e74206d69736d61746368000000000000006044820152606401610bcb565b80546001600160a01b03878116600090815260058401602052604090819020546001850154915163573ade8160e01b81529083166004820152602481018890526044810191909152898216606482015291169063573ade81906084016020604051808303816000875af1158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca29190613733565b92506000612cb0848661374c565b90508015612d8c576001600160a01b0387811660009081526005840160205260409081902054905163a9059cbb60e01b81528a831660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015612d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d409190613711565b612d8c5760405162461bcd60e51b815260206004820152601760248201527f7472616e7366657220746f2075736572206661696c65640000000000000000006044820152606401610bcb565b8592508015612db057808611612da3576000612dad565b612dad818761374c565b92505b505094509492505050565b6000805160206138358339815191525460ff16611f9557604051638dfc202b60e01b815260040160405180910390fd5b60006000805160206137d5833981519152611684565b612e0a82613064565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612e4f57610c8b82826130c9565b6111b861313f565b612e5f61315e565b611f9557604051631afcd79f60e31b815260040160405180910390fd5b6121e6612e57565b600080612e8f611e10565b6001600160a01b03808616600081815260048401602090815260408083209489168352938152838220549282526003850190529190912054919250612ed3916136fe565b421015949350505050565b600080600080612eec611e10565b9050612710816007015487612f01919061375f565b612f0b9190613776565b9350612710816008015487612f20919061375f565b612f2a9190613776565b60098201549093506001600160a01b031615801590612f4d5750600081600a0154115b156130015760098101546040516370a0823160e01b81526001600160a01b03878116600483015260009216906370a0823190602401602060405180830381865afa158015612f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc39190613733565b905081600a01548110612fff57600061271083600b015487612fe5919061375f565b612fef9190613776565b9050612ffb818761374c565b9550505b505b600061300d84866136fe565b90508681111561304f5760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401610bcb565b613059818861374c565b925050509250925092565b806001600160a01b03163b60000361309a57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610bcb565b6000805160206137d583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516130e69190613798565b600060405180830381855af49150503d8060008114613121576040519150601f19603f3d011682016040523d82523d6000602084013e613126565b606091505b5091509150613136858383613178565b95945050505050565b3415611f955760405163b398979f60e01b815260040160405180910390fd5b600061316861274b565b54600160401b900460ff16919050565b60608261318d57613188826131d7565b6131d0565b81511580156131a457506001600160a01b0384163b155b156131cd57604051639996b31560e01b81526001600160a01b0385166004820152602401610bcb565b50805b9392505050565b8051156131e75780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b60006020828403121561321257600080fd5b81356001600160e01b0319811681146131d057600080fd5b80356001600160a01b038116811461324157600080fd5b919050565b6000806040838503121561325957600080fd5b6132628361322a565b91506132706020840161322a565b90509250929050565b60006020828403121561328b57600080fd5b6131d08261322a565b60008083601f8401126132a657600080fd5b50813567ffffffffffffffff8111156132be57600080fd5b6020830191508360208260051b85010111156132d957600080fd5b9250929050565b6000806000604084860312156132f557600080fd5b833567ffffffffffffffff81111561330c57600080fd5b61331886828701613294565b909450925061332b90506020850161322a565b90509250925092565b60006020828403121561334657600080fd5b5035919050565b6000806040838503121561336057600080fd5b823591506132706020840161322a565b6000806000806000806080878903121561338957600080fd5b863567ffffffffffffffff808211156133a157600080fd5b6133ad8a838b01613294565b909850965060208901359150808211156133c657600080fd5b506133d389828a01613294565b979a9699509760408101359660609091013595509350505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561341757600080fd5b6134208361322a565b9150602083013567ffffffffffffffff8082111561343d57600080fd5b818501915085601f83011261345157600080fd5b813581811115613463576134636133ee565b604051601f8201601f19908116603f0116810190838211818310171561348b5761348b6133ee565b816040528281528860208487010111156134a457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156134e15781810151838201526020016134c9565b50506000910152565b60208152600082518060208401526135098160408501602087016134c6565b601f01601f19169190910160400192915050565b60008151808452602080850194506020840160005b838110156135575781516001600160a01b031687529582019590820190600101613532565b509495945050505050565b6020815260006131d0602083018461351d565b600080600080600080600080610100898b03121561359257600080fd5b61359b8961322a565b97506135a960208a0161322a565b96506135b760408a0161322a565b95506135c560608a0161322a565b94506135d360808a0161322a565b93506135e160a08a0161322a565b92506135ef60c08a0161322a565b91506135fd60e08a0161322a565b90509295985092959890939650565b60408152600061361f604083018561351d565b82810360208481019190915284518083528582019282019060005b818110156136565784518352938301939183019160010161363a565b5090979650505050505050565b60008060006060848603121561367857600080fd5b6136818461322a565b92506020840135915061332b6040850161322a565b6000806000606084860312156136ab57600080fd5b6136b48461322a565b92506136c26020850161322a565b9150604084013590509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156109dd576109dd6136e8565b60006020828403121561372357600080fd5b815180151581146131d057600080fd5b60006020828403121561374557600080fd5b5051919050565b818103818111156109dd576109dd6136e8565b80820281158282048414176109dd576109dd6136e8565b60008261379357634e487b7160e01b600052601260045260246000fd5b500490565b600082516137aa8184602087016134c6565b919091019291505056febf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92902dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b190fe26b24e4eb5a11bbcf2048b6c96a3caf78dca69b6d471a8eff53eed0f9264736f6c63430008180033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"InvalidFeesBPS","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidTipsBPS","type":"error"},{"inputs":[],"name":"InvalidTokenAddress","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[],"name":"TokenNotAuthorized","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"inputs":[],"name":"UserNotAuthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"ConfiguredR2R","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"RevokedR2R","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EMERGENCY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"allowedMaxAmounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"supplyToken","type":"address"}],"name":"authorizeTokenPair","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"address","name":"token","type":"address"}],"name":"batchRent2Repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256","name":"period","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"configureRent2Repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"daoFeeReductionBPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoFeeReductionMinimumAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoFeeReductionToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoFeesBPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoTreasuryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyTokenRecovery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getActiveTokens","outputs":[{"internalType":"address[]","name":"activeTokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDaoFeeReductionConfiguration","outputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"minimumAmount","type":"uint256"},{"internalType":"uint256","name":"reductionPercentage","type":"uint256"},{"internalType":"address","name":"treasuryAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeConfiguration","outputs":[{"internalType":"uint256","name":"daoFees","type":"uint256"},{"internalType":"uint256","name":"senderTips","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserConfigs","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"maxAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"giveApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"},{"internalType":"address","name":"emergency","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"_rmm","type":"address"},{"internalType":"address","name":"wxdaiToken","type":"address"},{"internalType":"address","name":"wxdaiArmmToken","type":"address"},{"internalType":"address","name":"usdcToken","type":"address"},{"internalType":"address","name":"usdcArmmToken","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"isAuthorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"lastRepayTimestamps","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"periodicity","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"removeUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"rent2repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"revokeRent2RepayAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rmm","outputs":[{"internalType":"contract IRMM","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"senderTipsBPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"tokenConfig","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"supplyToken","type":"address"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct Rent2Repay.TokenConfig","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"unauthorizeToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newMinimumAmount","type":"uint256"}],"name":"updateDaoFeeReductionMinimumAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPercentage","type":"uint256"}],"name":"updateDaoFeeReductionPercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newToken","type":"address"}],"name":"updateDaoFeeReductionToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeesBPS","type":"uint256"}],"name":"updateDaoFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newAddress","type":"address"}],"name":"updateDaoTreasuryAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newTipsBPS","type":"uint256"}],"name":"updateSenderTips","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"whoami","outputs":[{"internalType":"bool","name":"isAdmin","type":"bool"},{"internalType":"bool","name":"isOperator","type":"bool"},{"internalType":"bool","name":"isEmergency","type":"bool"}],"stateMutability":"view","type":"function"}]}